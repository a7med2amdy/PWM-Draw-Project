
TEST2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000286e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002f2  00800060  0000286e  00002902  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800352  00800352  00002bf4  2**0
                  ALLOC
  3 .stab         0000210c  00000000  00000000  00002bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fe9  00000000  00000000  00004d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000607b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008486  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000980c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a9e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000aba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ae9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__vector_2>
       c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 36 13 	jmp	0x266c	; 0x266c <__vector_10>
      2c:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 35       	cpi	r26, 0x52	; 82
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 e5       	ldi	r26, 0x52	; 82
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 36       	cpi	r26, 0x65	; 101
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c0 12 	call	0x2580	; 0x2580 <main>
      8a:	0c 94 35 14 	jmp	0x286a	; 0x286a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <timer0_init>:

#include "TIMER0_Int.h"



void timer0_init() {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
    // Set Timer0 in Normal mode
    TCCR0 = 0;
     e36:	e3 e5       	ldi	r30, 0x53	; 83
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	10 82       	st	Z, r1

    // Set Timer0 prescaler to 1 (no prescaling)
    TCCR0 |= (1 << CS00);
     e3c:	a3 e5       	ldi	r26, 0x53	; 83
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e3 e5       	ldi	r30, 0x53	; 83
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	81 60       	ori	r24, 0x01	; 1
     e48:	8c 93       	st	X, r24

    // Enable Timer0 Overflow Interrupt
    TIMSK |= (1 << TOIE0);
     e4a:	a9 e5       	ldi	r26, 0x59	; 89
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e9 e5       	ldi	r30, 0x59	; 89
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	81 60       	ori	r24, 0x01	; 1
     e56:	8c 93       	st	X, r24

    // Enable global interrupts
    //sei();
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <GIE_vidEnable>:
 */

#define SREG 		*((volatile unsigned char*)0x5F)

void GIE_vidEnable(void)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7);
     e66:	af e5       	ldi	r26, 0x5F	; 95
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ef e5       	ldi	r30, 0x5F	; 95
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	80 68       	ori	r24, 0x80	; 128
     e72:	8c 93       	st	X, r24
//	asm("sei");
//volatile __asm("SEI");
//	__asm__("sei");
}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <GIE_vidDisable>:

void GIE_vidDisable(void)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
	//volatile __asm("CLI");
	SREG &=~(1<<7);
     e82:	af e5       	ldi	r26, 0x5F	; 95
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	ef e5       	ldi	r30, 0x5F	; 95
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 77       	andi	r24, 0x7F	; 127
     e8e:	8c 93       	st	X, r24
}
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <EXTI_enuInit>:

static void (*LOC_pfunISRFun[3])(void) = {NULL, NULL, NULL};
// static pvFUn ISR[3];

ES_t EXTI_enuInit(void)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <EXTI_enuInit+0x6>
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_enuErrorState = ES_NOK;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8Iter = 0;
     ea4:	19 82       	std	Y+1, r1	; 0x01
    for (Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTIPinNum ; Local_u8Iter++)
     ea6:	19 82       	std	Y+1, r1	; 0x01
     ea8:	3b c0       	rjmp	.+118    	; 0xf20 <EXTI_enuInit+0x8a>
    {
        enuSetIntMode   (EXTI_astrEXTIConfig[Local_u8Iter].intPin , EXTI_astrEXTIConfig[Local_u8Iter].intMode );
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	c9 01       	movw	r24, r18
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	82 0f       	add	r24, r18
     eb8:	93 1f       	adc	r25, r19
     eba:	fc 01       	movw	r30, r24
     ebc:	e7 59       	subi	r30, 0x97	; 151
     ebe:	fe 4f       	sbci	r31, 0xFE	; 254
     ec0:	40 81       	ld	r20, Z
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	c9 01       	movw	r24, r18
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	82 0f       	add	r24, r18
     ed0:	93 1f       	adc	r25, r19
     ed2:	fc 01       	movw	r30, r24
     ed4:	e5 59       	subi	r30, 0x95	; 149
     ed6:	fe 4f       	sbci	r31, 0xFE	; 254
     ed8:	90 81       	ld	r25, Z
     eda:	84 2f       	mov	r24, r20
     edc:	69 2f       	mov	r22, r25
     ede:	0e 94 1b 08 	call	0x1036	; 0x1036 <enuSetIntMode>
        enuSetSenseLevel(EXTI_astrEXTIConfig[Local_u8Iter].intPin , EXTI_astrEXTIConfig[Local_u8Iter].senseLevel );
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	c9 01       	movw	r24, r18
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	82 0f       	add	r24, r18
     ef0:	93 1f       	adc	r25, r19
     ef2:	fc 01       	movw	r30, r24
     ef4:	e7 59       	subi	r30, 0x97	; 151
     ef6:	fe 4f       	sbci	r31, 0xFE	; 254
     ef8:	40 81       	ld	r20, Z
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	c9 01       	movw	r24, r18
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	82 0f       	add	r24, r18
     f08:	93 1f       	adc	r25, r19
     f0a:	fc 01       	movw	r30, r24
     f0c:	e6 59       	subi	r30, 0x96	; 150
     f0e:	fe 4f       	sbci	r31, 0xFE	; 254
     f10:	90 81       	ld	r25, Z
     f12:	84 2f       	mov	r24, r20
     f14:	69 2f       	mov	r22, r25
     f16:	0e 94 75 08 	call	0x10ea	; 0x10ea <enuSetSenseLevel>
ES_t EXTI_enuInit(void)
{
    ES_t Local_enuErrorState = ES_NOK;

    u8 Local_u8Iter = 0;
    for (Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTIPinNum ; Local_u8Iter++)
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	90 91 68 01 	lds	r25, 0x0168
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	89 17       	cp	r24, r25
     f28:	08 f4       	brcc	.+2      	; 0xf2c <EXTI_enuInit+0x96>
     f2a:	bf cf       	rjmp	.-130    	; 0xeaa <EXTI_enuInit+0x14>
    {
        enuSetIntMode   (EXTI_astrEXTIConfig[Local_u8Iter].intPin , EXTI_astrEXTIConfig[Local_u8Iter].intMode );
        enuSetSenseLevel(EXTI_astrEXTIConfig[Local_u8Iter].intPin , EXTI_astrEXTIConfig[Local_u8Iter].senseLevel );
    }

    return Local_enuErrorState;
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <EXTI_enuSetSenseLevel>:

ES_t EXTI_enuSetSenseLevel(u8 Copy_u8IntPin , u8 Copy_u8SenseLevel)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <EXTI_enuSetSenseLevel+0x6>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorState = ES_NOK;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	89 83       	std	Y+1, r24	; 0x01

    enuSetSenseLevel(Copy_u8IntPin , Copy_u8SenseLevel );
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	6b 81       	ldd	r22, Y+3	; 0x03
     f50:	0e 94 75 08 	call	0x10ea	; 0x10ea <enuSetSenseLevel>

    return Local_enuErrorState;
     f54:	89 81       	ldd	r24, Y+1	; 0x01
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <EXTI_enuEnableInterrupt>:

ES_t EXTI_enuEnableInterrupt(u8 Copy_u8IntPin)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <EXTI_enuEnableInterrupt+0x6>
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_enuErrorState = ES_NOK;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01

    enuSetIntMode(Copy_u8IntPin, EXTI_INTERRUPT_MODE );
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	6a e4       	ldi	r22, 0x4A	; 74
     f76:	0e 94 1b 08 	call	0x1036	; 0x1036 <enuSetIntMode>

    return Local_enuErrorState;
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <EXTI_enuDisableInterrupt>:

ES_t EXTI_enuDisableInterrupt(u8 Copy_u8IntPin)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <EXTI_enuDisableInterrupt+0x6>
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_enuErrorState = ES_NOK;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	89 83       	std	Y+1, r24	; 0x01

    enuSetIntMode(Copy_u8IntPin, EXTI_POLLING_MODE );
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	65 e4       	ldi	r22, 0x45	; 69
     f9a:	0e 94 1b 08 	call	0x1036	; 0x1036 <enuSetIntMode>

    return Local_enuErrorState;
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <EXTI_enuSetCallBack>:

ES_t EXTI_enuSetCallBack(u8 Copy_u8IntPin , void(*Copy_pFunAppFun)(void))
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <EXTI_enuSetCallBack+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <EXTI_enuSetCallBack+0x8>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	8a 83       	std	Y+2, r24	; 0x02
     fb8:	7c 83       	std	Y+4, r23	; 0x04
     fba:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorState = ES_NOK;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pFunAppFun != NULL)
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	69 f0       	breq	.+26     	; 0xfe2 <EXTI_enuSetCallBack+0x38>
    {
        LOC_pfunISRFun[Copy_u8IntPin] = Copy_pFunAppFun;
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	fc 01       	movw	r30, r24
     fd4:	ee 5a       	subi	r30, 0xAE	; 174
     fd6:	fc 4f       	sbci	r31, 0xFC	; 252
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	91 83       	std	Z+1, r25	; 0x01
     fde:	80 83       	st	Z, r24
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <EXTI_enuSetCallBack+0x3c>
    }
    else
    {
        Local_enuErrorState = ES_NULL_POINTER;
     fe2:	83 e0       	ldi	r24, 0x03	; 3
     fe4:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_enuErrorState;
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <__vector_2>:
	
//}

//INT1
void __vector_2 (void)
{
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    
}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti

00001016 <__vector_3>:
//INT2
void __vector_3 (void)
{
    1016:	1f 92       	push	r1
    1018:	0f 92       	push	r0
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	0f 92       	push	r0
    101e:	11 24       	eor	r1, r1
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
   
    
}
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	0f 90       	pop	r0
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	0f 90       	pop	r0
    1032:	1f 90       	pop	r1
    1034:	18 95       	reti

00001036 <enuSetIntMode>:


void enuSetIntMode(u8 Copy_u8IntPin, u8 Copy_u8IntMode)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	00 d0       	rcall	.+0      	; 0x103c <enuSetIntMode+0x6>
    103c:	00 d0       	rcall	.+0      	; 0x103e <enuSetIntMode+0x8>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8IntPin)
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3c 83       	std	Y+4, r19	; 0x04
    104e:	2b 83       	std	Y+3, r18	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	91 05       	cpc	r25, r1
    1058:	e1 f0       	breq	.+56     	; 0x1092 <enuSetIntMode+0x5c>
    105a:	2b 81       	ldd	r18, Y+3	; 0x03
    105c:	3c 81       	ldd	r19, Y+4	; 0x04
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	51 f1       	breq	.+84     	; 0x10b8 <enuSetIntMode+0x82>
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	c1 f5       	brne	.+112    	; 0x10dc <enuSetIntMode+0xa6>
    {
        case EXTI_INT0:
            if (Copy_u8IntMode == EXTI_INTERRUPT_MODE)
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	8a 34       	cpi	r24, 0x4A	; 74
    1070:	41 f4       	brne	.+16     	; 0x1082 <enuSetIntMode+0x4c>
            {
                GICR |= (1<<6);
    1072:	ab e5       	ldi	r26, 0x5B	; 91
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	eb e5       	ldi	r30, 0x5B	; 91
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 64       	ori	r24, 0x40	; 64
    107e:	8c 93       	st	X, r24
    1080:	2d c0       	rjmp	.+90     	; 0x10dc <enuSetIntMode+0xa6>
            }
            else 
            {
                GICR &=~ (1<<6);
    1082:	ab e5       	ldi	r26, 0x5B	; 91
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	eb e5       	ldi	r30, 0x5B	; 91
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8f 7b       	andi	r24, 0xBF	; 191
    108e:	8c 93       	st	X, r24
    1090:	25 c0       	rjmp	.+74     	; 0x10dc <enuSetIntMode+0xa6>
            }
            break;
            
        case EXTI_INT1:
            if (Copy_u8IntMode == EXTI_INTERRUPT_MODE)
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	8a 34       	cpi	r24, 0x4A	; 74
    1096:	41 f4       	brne	.+16     	; 0x10a8 <enuSetIntMode+0x72>
            {
                GICR |= (1<<7);
    1098:	ab e5       	ldi	r26, 0x5B	; 91
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	eb e5       	ldi	r30, 0x5B	; 91
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	80 68       	ori	r24, 0x80	; 128
    10a4:	8c 93       	st	X, r24
    10a6:	1a c0       	rjmp	.+52     	; 0x10dc <enuSetIntMode+0xa6>
            }
            else 
            {
                GICR &=~ (1<<7);
    10a8:	ab e5       	ldi	r26, 0x5B	; 91
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	eb e5       	ldi	r30, 0x5B	; 91
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8f 77       	andi	r24, 0x7F	; 127
    10b4:	8c 93       	st	X, r24
    10b6:	12 c0       	rjmp	.+36     	; 0x10dc <enuSetIntMode+0xa6>
            }
            break;

        case EXTI_INT2:
            if (Copy_u8IntMode == EXTI_INTERRUPT_MODE)
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	8a 34       	cpi	r24, 0x4A	; 74
    10bc:	41 f4       	brne	.+16     	; 0x10ce <enuSetIntMode+0x98>
            {
                GICR |= (1<<5);
    10be:	ab e5       	ldi	r26, 0x5B	; 91
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	eb e5       	ldi	r30, 0x5B	; 91
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	80 62       	ori	r24, 0x20	; 32
    10ca:	8c 93       	st	X, r24
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <enuSetIntMode+0xa6>
            }
            else 
            {
                GICR &=~ (1<<6);
    10ce:	ab e5       	ldi	r26, 0x5B	; 91
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	eb e5       	ldi	r30, 0x5B	; 91
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	8f 7b       	andi	r24, 0xBF	; 191
    10da:	8c 93       	st	X, r24
            }
            break;
    }
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <enuSetSenseLevel>:
void enuSetSenseLevel(u8 Copy_u8IntPin, u8 Copy_u8SenseLevel)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <enuSetSenseLevel+0x6>
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8IntPin)
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	c9 f5       	brne	.+114    	; 0x1174 <enuSetSenseLevel+0x8a>
    {
        case EXTI_INT0:
            if (Copy_u8SenseLevel == EXTI_LOW_LEVEL)
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	81 34       	cpi	r24, 0x41	; 65
    1106:	41 f4       	brne	.+16     	; 0x1118 <enuSetSenseLevel+0x2e>
            {
                MCUCR &= ~(3<<0);
    1108:	a5 e5       	ldi	r26, 0x55	; 85
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e5 e5       	ldi	r30, 0x55	; 85
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8c 7f       	andi	r24, 0xFC	; 252
    1114:	8c 93       	st	X, r24
    1116:	2e c0       	rjmp	.+92     	; 0x1174 <enuSetSenseLevel+0x8a>
            }
            else if (Copy_u8SenseLevel == EXTI_ANY_CHANGE)
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	80 32       	cpi	r24, 0x20	; 32
    111c:	79 f4       	brne	.+30     	; 0x113c <enuSetSenseLevel+0x52>
            {
                MCUCR &= ~(3<<0);
    111e:	a5 e5       	ldi	r26, 0x55	; 85
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e5 e5       	ldi	r30, 0x55	; 85
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	8c 7f       	andi	r24, 0xFC	; 252
    112a:	8c 93       	st	X, r24
                MCUCR |=  (1<<0);
    112c:	a5 e5       	ldi	r26, 0x55	; 85
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e5       	ldi	r30, 0x55	; 85
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	81 60       	ori	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	1c c0       	rjmp	.+56     	; 0x1174 <enuSetSenseLevel+0x8a>
            }
            else if (Copy_u8SenseLevel == EXTI_FALLING)
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	8c 30       	cpi	r24, 0x0C	; 12
    1140:	79 f4       	brne	.+30     	; 0x1160 <enuSetSenseLevel+0x76>
            {
                MCUCR &= ~(3<<0);
    1142:	a5 e5       	ldi	r26, 0x55	; 85
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e5 e5       	ldi	r30, 0x55	; 85
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8c 7f       	andi	r24, 0xFC	; 252
    114e:	8c 93       	st	X, r24
                MCUCR |=  (1<<1);
    1150:	a5 e5       	ldi	r26, 0x55	; 85
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e5       	ldi	r30, 0x55	; 85
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	82 60       	ori	r24, 0x02	; 2
    115c:	8c 93       	st	X, r24
    115e:	0a c0       	rjmp	.+20     	; 0x1174 <enuSetSenseLevel+0x8a>
            }
            else if (Copy_u8SenseLevel == EXTI_RISING)
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	8a 35       	cpi	r24, 0x5A	; 90
    1164:	39 f4       	brne	.+14     	; 0x1174 <enuSetSenseLevel+0x8a>
            {
                MCUCR |=  (3<<0);
    1166:	a5 e5       	ldi	r26, 0x55	; 85
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e5       	ldi	r30, 0x55	; 85
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	83 60       	ori	r24, 0x03	; 3
    1172:	8c 93       	st	X, r24
            {
            }
            break;
            */
    }
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	0f 92       	push	r0
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_enuErrorState = ES_NOK;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	89 83       	std	Y+1, r24	; 0x01

//10111010
//    DDRA = DIO_CONC(DIO_PA7_DIR , DIO_PA6_DIR , DIO_PA5_DIR , DIO_PA4_DIR , DIO_PA3_DIR, DIO_PA2_DIR, DIO_PA1_DIR,DIO_PA0_DIR);

    return Local_enuErrorState;
    118c:	89 81       	ldd	r24, Y+1	; 0x01
}
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <DIO_enuSetPinDirection+0x6>
    119c:	00 d0       	rcall	.+0      	; 0x119e <DIO_enuSetPinDirection+0x8>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <DIO_enuSetPinDirection+0xa>
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	8a 83       	std	Y+2, r24	; 0x02
    11a6:	6b 83       	std	Y+3, r22	; 0x03
    11a8:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_enuErrorState = ES_NOK;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_u8GroupID <= DIO_GROUP_D) && (Copy_u8PinID <= DIO_PIN_7)
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <DIO_enuSetPinDirection+0x20>
    11b4:	d0 c0       	rjmp	.+416    	; 0x1356 <DIO_enuSetPinDirection+0x1c0>
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	88 30       	cpi	r24, 0x08	; 8
    11ba:	08 f0       	brcs	.+2      	; 0x11be <DIO_enuSetPinDirection+0x28>
    11bc:	cc c0       	rjmp	.+408    	; 0x1356 <DIO_enuSetPinDirection+0x1c0>
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	82 30       	cpi	r24, 0x02	; 2
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <DIO_enuSetPinDirection+0x30>
    11c4:	c8 c0       	rjmp	.+400    	; 0x1356 <DIO_enuSetPinDirection+0x1c0>
            && (Copy_u8Direction <= DIO_OUTPUT))
    {
        switch(Copy_u8GroupID)
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3e 83       	std	Y+6, r19	; 0x06
    11ce:	2d 83       	std	Y+5, r18	; 0x05
    11d0:	6d 81       	ldd	r22, Y+5	; 0x05
    11d2:	7e 81       	ldd	r23, Y+6	; 0x06
    11d4:	61 30       	cpi	r22, 0x01	; 1
    11d6:	71 05       	cpc	r23, r1
    11d8:	09 f4       	brne	.+2      	; 0x11dc <DIO_enuSetPinDirection+0x46>
    11da:	41 c0       	rjmp	.+130    	; 0x125e <DIO_enuSetPinDirection+0xc8>
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
    11de:	9e 81       	ldd	r25, Y+6	; 0x06
    11e0:	82 30       	cpi	r24, 0x02	; 2
    11e2:	91 05       	cpc	r25, r1
    11e4:	34 f4       	brge	.+12     	; 0x11f2 <DIO_enuSetPinDirection+0x5c>
    11e6:	2d 81       	ldd	r18, Y+5	; 0x05
    11e8:	3e 81       	ldd	r19, Y+6	; 0x06
    11ea:	21 15       	cp	r18, r1
    11ec:	31 05       	cpc	r19, r1
    11ee:	71 f0       	breq	.+28     	; 0x120c <DIO_enuSetPinDirection+0x76>
    11f0:	b0 c0       	rjmp	.+352    	; 0x1352 <DIO_enuSetPinDirection+0x1bc>
    11f2:	6d 81       	ldd	r22, Y+5	; 0x05
    11f4:	7e 81       	ldd	r23, Y+6	; 0x06
    11f6:	62 30       	cpi	r22, 0x02	; 2
    11f8:	71 05       	cpc	r23, r1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <DIO_enuSetPinDirection+0x68>
    11fc:	59 c0       	rjmp	.+178    	; 0x12b0 <DIO_enuSetPinDirection+0x11a>
    11fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1200:	9e 81       	ldd	r25, Y+6	; 0x06
    1202:	83 30       	cpi	r24, 0x03	; 3
    1204:	91 05       	cpc	r25, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <DIO_enuSetPinDirection+0x74>
    1208:	7c c0       	rjmp	.+248    	; 0x1302 <DIO_enuSetPinDirection+0x16c>
    120a:	a3 c0       	rjmp	.+326    	; 0x1352 <DIO_enuSetPinDirection+0x1bc>
        {
            case DIO_GROUP_A:
                DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    120c:	aa e3       	ldi	r26, 0x3A	; 58
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	ea e3       	ldi	r30, 0x3A	; 58
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_enuSetPinDirection+0x92>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	2a 95       	dec	r18
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_enuSetPinDirection+0x8e>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
                DDRA |=  (Copy_u8Direction << Copy_u8PinID);
    1232:	aa e3       	ldi	r26, 0x3A	; 58
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ea e3       	ldi	r30, 0x3A	; 58
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	b9 01       	movw	r22, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_enuSetPinDirection+0xbc>
    124e:	66 0f       	add	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	8a 95       	dec	r24
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_enuSetPinDirection+0xb8>
    1256:	cb 01       	movw	r24, r22
    1258:	84 2b       	or	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	7a c0       	rjmp	.+244    	; 0x1352 <DIO_enuSetPinDirection+0x1bc>
            break;

            case DIO_GROUP_B:
                DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    125e:	a7 e3       	ldi	r26, 0x37	; 55
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e7 e3       	ldi	r30, 0x37	; 55
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 c0       	rjmp	.+4      	; 0x127a <DIO_enuSetPinDirection+0xe4>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	2a 95       	dec	r18
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <DIO_enuSetPinDirection+0xe0>
    127e:	80 95       	com	r24
    1280:	84 23       	and	r24, r20
    1282:	8c 93       	st	X, r24
                DDRB |=  (Copy_u8Direction << Copy_u8PinID);
    1284:	a7 e3       	ldi	r26, 0x37	; 55
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e7 e3       	ldi	r30, 0x37	; 55
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	b9 01       	movw	r22, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_enuSetPinDirection+0x10e>
    12a0:	66 0f       	add	r22, r22
    12a2:	77 1f       	adc	r23, r23
    12a4:	8a 95       	dec	r24
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_enuSetPinDirection+0x10a>
    12a8:	cb 01       	movw	r24, r22
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	51 c0       	rjmp	.+162    	; 0x1352 <DIO_enuSetPinDirection+0x1bc>
            break;

            case DIO_GROUP_C:
                DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    12b0:	a4 e3       	ldi	r26, 0x34	; 52
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e4 e3       	ldi	r30, 0x34	; 52
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_enuSetPinDirection+0x136>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	2a 95       	dec	r18
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_enuSetPinDirection+0x132>
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	8c 93       	st	X, r24
                DDRC |=  (Copy_u8Direction << Copy_u8PinID);
    12d6:	a4 e3       	ldi	r26, 0x34	; 52
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e4 e3       	ldi	r30, 0x34	; 52
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8c 81       	ldd	r24, Y+4	; 0x04
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	b9 01       	movw	r22, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_enuSetPinDirection+0x160>
    12f2:	66 0f       	add	r22, r22
    12f4:	77 1f       	adc	r23, r23
    12f6:	8a 95       	dec	r24
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_enuSetPinDirection+0x15c>
    12fa:	cb 01       	movw	r24, r22
    12fc:	84 2b       	or	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	28 c0       	rjmp	.+80     	; 0x1352 <DIO_enuSetPinDirection+0x1bc>
            break;
            
            case DIO_GROUP_D:
                DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1302:	a1 e3       	ldi	r26, 0x31	; 49
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e1 e3       	ldi	r30, 0x31	; 49
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_enuSetPinDirection+0x188>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	2a 95       	dec	r18
    1320:	e2 f7       	brpl	.-8      	; 0x131a <DIO_enuSetPinDirection+0x184>
    1322:	80 95       	com	r24
    1324:	84 23       	and	r24, r20
    1326:	8c 93       	st	X, r24
                DDRD |=  (Copy_u8Direction << Copy_u8PinID);
    1328:	a1 e3       	ldi	r26, 0x31	; 49
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e1 e3       	ldi	r30, 0x31	; 49
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	88 2f       	mov	r24, r24
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	b9 01       	movw	r22, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <DIO_enuSetPinDirection+0x1b2>
    1344:	66 0f       	add	r22, r22
    1346:	77 1f       	adc	r23, r23
    1348:	8a 95       	dec	r24
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <DIO_enuSetPinDirection+0x1ae>
    134c:	cb 01       	movw	r24, r22
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
            break;

            default:
            break;
        }
        Local_enuErrorState = ES_OK;
    1352:	19 82       	std	Y+1, r1	; 0x01
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_enuSetPinDirection+0x1c4>
    }
    else
    {
        Local_enuErrorState = ES_OUT_OF_RANGE;
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_enuErrorState;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
}
    135c:	26 96       	adiw	r28, 0x06	; 6
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	29 97       	sbiw	r28, 0x09	; 9
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	8a 83       	std	Y+2, r24	; 0x02
    1384:	6b 83       	std	Y+3, r22	; 0x03
    1386:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_enuErrorState = ES_NOK;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	89 83       	std	Y+1, r24	; 0x01

        if ((Copy_u8GroupID <= DIO_GROUP_D) && (Copy_u8PinID <= DIO_PIN_7)
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	84 30       	cpi	r24, 0x04	; 4
    1390:	08 f0       	brcs	.+2      	; 0x1394 <DIO_enuSetPinValue+0x26>
    1392:	df c0       	rjmp	.+446    	; 0x1552 <DIO_enuSetPinValue+0x1e4>
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 30       	cpi	r24, 0x08	; 8
    1398:	08 f0       	brcs	.+2      	; 0x139c <DIO_enuSetPinValue+0x2e>
    139a:	db c0       	rjmp	.+438    	; 0x1552 <DIO_enuSetPinValue+0x1e4>
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <DIO_enuSetPinValue+0x36>
    13a2:	d7 c0       	rjmp	.+430    	; 0x1552 <DIO_enuSetPinValue+0x1e4>
            && (Copy_u8Value <= DIO_HIGH))
    {
        switch(Copy_u8GroupID)
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	39 87       	std	Y+9, r19	; 0x09
    13ac:	28 87       	std	Y+8, r18	; 0x08
    13ae:	88 85       	ldd	r24, Y+8	; 0x08
    13b0:	99 85       	ldd	r25, Y+9	; 0x09
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	09 f4       	brne	.+2      	; 0x13ba <DIO_enuSetPinValue+0x4c>
    13b8:	44 c0       	rjmp	.+136    	; 0x1442 <DIO_enuSetPinValue+0xd4>
    13ba:	e8 85       	ldd	r30, Y+8	; 0x08
    13bc:	f9 85       	ldd	r31, Y+9	; 0x09
    13be:	e2 30       	cpi	r30, 0x02	; 2
    13c0:	f1 05       	cpc	r31, r1
    13c2:	34 f4       	brge	.+12     	; 0x13d0 <DIO_enuSetPinValue+0x62>
    13c4:	28 85       	ldd	r18, Y+8	; 0x08
    13c6:	39 85       	ldd	r19, Y+9	; 0x09
    13c8:	21 15       	cp	r18, r1
    13ca:	31 05       	cpc	r19, r1
    13cc:	71 f0       	breq	.+28     	; 0x13ea <DIO_enuSetPinValue+0x7c>
    13ce:	bf c0       	rjmp	.+382    	; 0x154e <DIO_enuSetPinValue+0x1e0>
    13d0:	88 85       	ldd	r24, Y+8	; 0x08
    13d2:	99 85       	ldd	r25, Y+9	; 0x09
    13d4:	82 30       	cpi	r24, 0x02	; 2
    13d6:	91 05       	cpc	r25, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <DIO_enuSetPinValue+0x6e>
    13da:	62 c0       	rjmp	.+196    	; 0x14a0 <DIO_enuSetPinValue+0x132>
    13dc:	e8 85       	ldd	r30, Y+8	; 0x08
    13de:	f9 85       	ldd	r31, Y+9	; 0x09
    13e0:	e3 30       	cpi	r30, 0x03	; 3
    13e2:	f1 05       	cpc	r31, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <DIO_enuSetPinValue+0x7a>
    13e6:	88 c0       	rjmp	.+272    	; 0x14f8 <DIO_enuSetPinValue+0x18a>
    13e8:	b2 c0       	rjmp	.+356    	; 0x154e <DIO_enuSetPinValue+0x1e0>
        {
            case DIO_GROUP_A:
                if(Copy_u8Value == DIO_HIGH)
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	a1 f4       	brne	.+40     	; 0x1418 <DIO_enuSetPinValue+0xaa>
                {
                    PORTA |=  (DIO_MASK_BIT << Copy_u8PinID);
    13f0:	ab e3       	ldi	r26, 0x3B	; 59
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	eb e3       	ldi	r30, 0x3B	; 59
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_enuSetPinValue+0xa0>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_enuSetPinValue+0x9c>
    1412:	84 2b       	or	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	9b c0       	rjmp	.+310    	; 0x154e <DIO_enuSetPinValue+0x1e0>
//							:"I" (Copy_u8PinID)
//							);
                }
                else
                {
                    PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1418:	ab e3       	ldi	r26, 0x3B	; 59
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	eb e3       	ldi	r30, 0x3B	; 59
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_enuSetPinValue+0xc8>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_enuSetPinValue+0xc4>
    143a:	80 95       	com	r24
    143c:	84 23       	and	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	86 c0       	rjmp	.+268    	; 0x154e <DIO_enuSetPinValue+0x1e0>
                }
            break;

            case DIO_GROUP_B:
                PORTB = (Copy_u8Value == DIO_HIGH)? (PORTB | (DIO_MASK_BIT<<Copy_u8PinID)) : (PORTB &  (~(DIO_MASK_BIT<<Copy_u8PinID)));
    1442:	28 e3       	ldi	r18, 0x38	; 56
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3f 83       	std	Y+7, r19	; 0x07
    1448:	2e 83       	std	Y+6, r18	; 0x06
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	91 f4       	brne	.+36     	; 0x1474 <DIO_enuSetPinValue+0x106>
    1450:	e8 e3       	ldi	r30, 0x38	; 56
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 2e       	mov	r0, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_enuSetPinValue+0xfc>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <DIO_enuSetPinValue+0xf8>
    146e:	84 2b       	or	r24, r20
    1470:	8d 83       	std	Y+5, r24	; 0x05
    1472:	11 c0       	rjmp	.+34     	; 0x1496 <DIO_enuSetPinValue+0x128>
    1474:	e8 e3       	ldi	r30, 0x38	; 56
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	48 2f       	mov	r20, r24
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_enuSetPinValue+0x11e>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	2a 95       	dec	r18
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_enuSetPinValue+0x11a>
    1490:	80 95       	com	r24
    1492:	84 23       	and	r24, r20
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	2d 81       	ldd	r18, Y+5	; 0x05
    1498:	ee 81       	ldd	r30, Y+6	; 0x06
    149a:	ff 81       	ldd	r31, Y+7	; 0x07
    149c:	20 83       	st	Z, r18
    149e:	57 c0       	rjmp	.+174    	; 0x154e <DIO_enuSetPinValue+0x1e0>
            break;

            case DIO_GROUP_C:
                if(Copy_u8Value == DIO_HIGH)
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	a1 f4       	brne	.+40     	; 0x14ce <DIO_enuSetPinValue+0x160>
                {
                    PORTC |=  (DIO_MASK_BIT << Copy_u8PinID);
    14a6:	a5 e3       	ldi	r26, 0x35	; 53
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e5 e3       	ldi	r30, 0x35	; 53
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_enuSetPinValue+0x156>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_enuSetPinValue+0x152>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	40 c0       	rjmp	.+128    	; 0x154e <DIO_enuSetPinValue+0x1e0>
                }
                else
                {
                    PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    14ce:	a5 e3       	ldi	r26, 0x35	; 53
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e5 e3       	ldi	r30, 0x35	; 53
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_enuSetPinValue+0x17e>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_enuSetPinValue+0x17a>
    14f0:	80 95       	com	r24
    14f2:	84 23       	and	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	2b c0       	rjmp	.+86     	; 0x154e <DIO_enuSetPinValue+0x1e0>
                }
                break;
            
            case DIO_GROUP_D:
                if(Copy_u8Value == DIO_HIGH)
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	a1 f4       	brne	.+40     	; 0x1526 <DIO_enuSetPinValue+0x1b8>
                {
                    PORTD |=  (DIO_MASK_BIT << Copy_u8PinID);
    14fe:	a2 e3       	ldi	r26, 0x32	; 50
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e2 e3       	ldi	r30, 0x32	; 50
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_enuSetPinValue+0x1ae>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_enuSetPinValue+0x1aa>
    1520:	84 2b       	or	r24, r20
    1522:	8c 93       	st	X, r24
    1524:	14 c0       	rjmp	.+40     	; 0x154e <DIO_enuSetPinValue+0x1e0>
                }
                else
                {
                    PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1526:	a2 e3       	ldi	r26, 0x32	; 50
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e2 e3       	ldi	r30, 0x32	; 50
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_enuSetPinValue+0x1d6>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <DIO_enuSetPinValue+0x1d2>
    1548:	80 95       	com	r24
    154a:	84 23       	and	r24, r20
    154c:	8c 93       	st	X, r24
                break;

            default:
            break;
        }
        Local_enuErrorState = ES_OK;
    154e:	19 82       	std	Y+1, r1	; 0x01
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_enuSetPinValue+0x1e8>
    }
    else
    {
        Local_enuErrorState = ES_OUT_OF_RANGE;
    1552:	82 e0       	ldi	r24, 0x02	; 2
    1554:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_enuErrorState;
    1556:	89 81       	ldd	r24, Y+1	; 0x01
}
    1558:	29 96       	adiw	r28, 0x09	; 9
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_enuTogglePinValue+0x6>
    1570:	00 d0       	rcall	.+0      	; 0x1572 <DIO_enuTogglePinValue+0x8>
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	8a 83       	std	Y+2, r24	; 0x02
    157a:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorState = ES_NOK;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_u8GroupID <= DIO_GROUP_D) && (Copy_u8PinID <= DIO_PIN_7))
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	84 30       	cpi	r24, 0x04	; 4
    1584:	08 f0       	brcs	.+2      	; 0x1588 <DIO_enuTogglePinValue+0x1e>
    1586:	74 c0       	rjmp	.+232    	; 0x1670 <DIO_enuTogglePinValue+0x106>
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	88 30       	cpi	r24, 0x08	; 8
    158c:	08 f0       	brcs	.+2      	; 0x1590 <DIO_enuTogglePinValue+0x26>
    158e:	70 c0       	rjmp	.+224    	; 0x1670 <DIO_enuTogglePinValue+0x106>
    {
        switch(Copy_u8GroupID)
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	3d 83       	std	Y+5, r19	; 0x05
    1598:	2c 83       	std	Y+4, r18	; 0x04
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	91 05       	cpc	r25, r1
    15a2:	49 f1       	breq	.+82     	; 0x15f6 <DIO_enuTogglePinValue+0x8c>
    15a4:	2c 81       	ldd	r18, Y+4	; 0x04
    15a6:	3d 81       	ldd	r19, Y+5	; 0x05
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <DIO_enuTogglePinValue+0x4e>
    15ae:	8c 81       	ldd	r24, Y+4	; 0x04
    15b0:	9d 81       	ldd	r25, Y+5	; 0x05
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	61 f0       	breq	.+24     	; 0x15ce <DIO_enuTogglePinValue+0x64>
    15b6:	5a c0       	rjmp	.+180    	; 0x166c <DIO_enuTogglePinValue+0x102>
    15b8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ba:	3d 81       	ldd	r19, Y+5	; 0x05
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	71 f1       	breq	.+92     	; 0x161e <DIO_enuTogglePinValue+0xb4>
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	9d 81       	ldd	r25, Y+5	; 0x05
    15c6:	83 30       	cpi	r24, 0x03	; 3
    15c8:	91 05       	cpc	r25, r1
    15ca:	e9 f1       	breq	.+122    	; 0x1646 <DIO_enuTogglePinValue+0xdc>
    15cc:	4f c0       	rjmp	.+158    	; 0x166c <DIO_enuTogglePinValue+0x102>
        {
            case DIO_GROUP_A:
                PORTA ^= (DIO_MASK_BIT <<Copy_u8PinID);
    15ce:	ab e3       	ldi	r26, 0x3B	; 59
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	eb e3       	ldi	r30, 0x3B	; 59
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_enuTogglePinValue+0x82>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_enuTogglePinValue+0x7e>
    15f0:	84 27       	eor	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	3b c0       	rjmp	.+118    	; 0x166c <DIO_enuTogglePinValue+0x102>
            break;

            case DIO_GROUP_B:
                PORTB ^= (DIO_MASK_BIT <<Copy_u8PinID);
    15f6:	a8 e3       	ldi	r26, 0x38	; 56
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e8 e3       	ldi	r30, 0x38	; 56
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_enuTogglePinValue+0xaa>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_enuTogglePinValue+0xa6>
    1618:	84 27       	eor	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	27 c0       	rjmp	.+78     	; 0x166c <DIO_enuTogglePinValue+0x102>
            break;

            case DIO_GROUP_C:
                PORTC ^= (DIO_MASK_BIT <<Copy_u8PinID);
    161e:	a5 e3       	ldi	r26, 0x35	; 53
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e5 e3       	ldi	r30, 0x35	; 53
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_enuTogglePinValue+0xd2>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_enuTogglePinValue+0xce>
    1640:	84 27       	eor	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	13 c0       	rjmp	.+38     	; 0x166c <DIO_enuTogglePinValue+0x102>
            break;
            
            case DIO_GROUP_D:
                PORTD ^= (DIO_MASK_BIT <<Copy_u8PinID);
    1646:	a2 e3       	ldi	r26, 0x32	; 50
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e2 e3       	ldi	r30, 0x32	; 50
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_enuTogglePinValue+0xfa>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <DIO_enuTogglePinValue+0xf6>
    1668:	84 27       	eor	r24, r20
    166a:	8c 93       	st	X, r24
            break;

            default:
            break;
        }
        Local_enuErrorState = ES_OK;
    166c:	19 82       	std	Y+1, r1	; 0x01
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_enuTogglePinValue+0x10a>
    }
    else
    {
        Local_enuErrorState = ES_OUT_OF_RANGE;
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_enuErrorState;
    1674:	89 81       	ldd	r24, Y+1	; 0x01
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 * Copy_pu8PinValue)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	27 97       	sbiw	r28, 0x07	; 7
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	8a 83       	std	Y+2, r24	; 0x02
    169c:	6b 83       	std	Y+3, r22	; 0x03
    169e:	5d 83       	std	Y+5, r21	; 0x05
    16a0:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_enuErrorState = ES_NOK;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8PinValue != NULL)
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	9d 81       	ldd	r25, Y+5	; 0x05
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <DIO_enuGetPinValue+0x2a>
    16ae:	7d c0       	rjmp	.+250    	; 0x17aa <DIO_enuGetPinValue+0x124>
    {
        if ((Copy_u8GroupID <= DIO_GROUP_D) && (Copy_u8PinID <= DIO_PIN_7))
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	84 30       	cpi	r24, 0x04	; 4
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <DIO_enuGetPinValue+0x32>
    16b6:	76 c0       	rjmp	.+236    	; 0x17a4 <DIO_enuGetPinValue+0x11e>
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	88 30       	cpi	r24, 0x08	; 8
    16bc:	08 f0       	brcs	.+2      	; 0x16c0 <DIO_enuGetPinValue+0x3a>
    16be:	72 c0       	rjmp	.+228    	; 0x17a4 <DIO_enuGetPinValue+0x11e>
        {
            switch(Copy_u8GroupID)
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	3f 83       	std	Y+7, r19	; 0x07
    16c8:	2e 83       	std	Y+6, r18	; 0x06
    16ca:	4e 81       	ldd	r20, Y+6	; 0x06
    16cc:	5f 81       	ldd	r21, Y+7	; 0x07
    16ce:	41 30       	cpi	r20, 0x01	; 1
    16d0:	51 05       	cpc	r21, r1
    16d2:	59 f1       	breq	.+86     	; 0x172a <DIO_enuGetPinValue+0xa4>
    16d4:	8e 81       	ldd	r24, Y+6	; 0x06
    16d6:	9f 81       	ldd	r25, Y+7	; 0x07
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	91 05       	cpc	r25, r1
    16dc:	34 f4       	brge	.+12     	; 0x16ea <DIO_enuGetPinValue+0x64>
    16de:	2e 81       	ldd	r18, Y+6	; 0x06
    16e0:	3f 81       	ldd	r19, Y+7	; 0x07
    16e2:	21 15       	cp	r18, r1
    16e4:	31 05       	cpc	r19, r1
    16e6:	69 f0       	breq	.+26     	; 0x1702 <DIO_enuGetPinValue+0x7c>
    16e8:	5b c0       	rjmp	.+182    	; 0x17a0 <DIO_enuGetPinValue+0x11a>
    16ea:	4e 81       	ldd	r20, Y+6	; 0x06
    16ec:	5f 81       	ldd	r21, Y+7	; 0x07
    16ee:	42 30       	cpi	r20, 0x02	; 2
    16f0:	51 05       	cpc	r21, r1
    16f2:	79 f1       	breq	.+94     	; 0x1752 <DIO_enuGetPinValue+0xcc>
    16f4:	8e 81       	ldd	r24, Y+6	; 0x06
    16f6:	9f 81       	ldd	r25, Y+7	; 0x07
    16f8:	83 30       	cpi	r24, 0x03	; 3
    16fa:	91 05       	cpc	r25, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <DIO_enuGetPinValue+0x7a>
    16fe:	3d c0       	rjmp	.+122    	; 0x177a <DIO_enuGetPinValue+0xf4>
    1700:	4f c0       	rjmp	.+158    	; 0x17a0 <DIO_enuGetPinValue+0x11a>
            {
                case DIO_GROUP_A:
                    *Copy_pu8PinValue = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    1702:	e9 e3       	ldi	r30, 0x39	; 57
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a9 01       	movw	r20, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_enuGetPinValue+0x94>
    1716:	55 95       	asr	r21
    1718:	47 95       	ror	r20
    171a:	8a 95       	dec	r24
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <DIO_enuGetPinValue+0x90>
    171e:	ca 01       	movw	r24, r20
    1720:	81 70       	andi	r24, 0x01	; 1
    1722:	ec 81       	ldd	r30, Y+4	; 0x04
    1724:	fd 81       	ldd	r31, Y+5	; 0x05
    1726:	80 83       	st	Z, r24
    1728:	3b c0       	rjmp	.+118    	; 0x17a0 <DIO_enuGetPinValue+0x11a>
                break;

                case DIO_GROUP_B:
                    *Copy_pu8PinValue = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    172a:	e6 e3       	ldi	r30, 0x36	; 54
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	88 2f       	mov	r24, r24
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	a9 01       	movw	r20, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_enuGetPinValue+0xbc>
    173e:	55 95       	asr	r21
    1740:	47 95       	ror	r20
    1742:	8a 95       	dec	r24
    1744:	e2 f7       	brpl	.-8      	; 0x173e <DIO_enuGetPinValue+0xb8>
    1746:	ca 01       	movw	r24, r20
    1748:	81 70       	andi	r24, 0x01	; 1
    174a:	ec 81       	ldd	r30, Y+4	; 0x04
    174c:	fd 81       	ldd	r31, Y+5	; 0x05
    174e:	80 83       	st	Z, r24
    1750:	27 c0       	rjmp	.+78     	; 0x17a0 <DIO_enuGetPinValue+0x11a>
                break;

                case DIO_GROUP_C:
                    *Copy_pu8PinValue = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    1752:	e3 e3       	ldi	r30, 0x33	; 51
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	88 2f       	mov	r24, r24
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	a9 01       	movw	r20, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_enuGetPinValue+0xe4>
    1766:	55 95       	asr	r21
    1768:	47 95       	ror	r20
    176a:	8a 95       	dec	r24
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <DIO_enuGetPinValue+0xe0>
    176e:	ca 01       	movw	r24, r20
    1770:	81 70       	andi	r24, 0x01	; 1
    1772:	ec 81       	ldd	r30, Y+4	; 0x04
    1774:	fd 81       	ldd	r31, Y+5	; 0x05
    1776:	80 83       	st	Z, r24
    1778:	13 c0       	rjmp	.+38     	; 0x17a0 <DIO_enuGetPinValue+0x11a>
                break;
                
                case DIO_GROUP_D:
                    *Copy_pu8PinValue = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    177a:	e0 e3       	ldi	r30, 0x30	; 48
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	a9 01       	movw	r20, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_enuGetPinValue+0x10c>
    178e:	55 95       	asr	r21
    1790:	47 95       	ror	r20
    1792:	8a 95       	dec	r24
    1794:	e2 f7       	brpl	.-8      	; 0x178e <DIO_enuGetPinValue+0x108>
    1796:	ca 01       	movw	r24, r20
    1798:	81 70       	andi	r24, 0x01	; 1
    179a:	ec 81       	ldd	r30, Y+4	; 0x04
    179c:	fd 81       	ldd	r31, Y+5	; 0x05
    179e:	80 83       	st	Z, r24
                break;

                default:
                break;
            }
            Local_enuErrorState = ES_OK;
    17a0:	19 82       	std	Y+1, r1	; 0x01
    17a2:	05 c0       	rjmp	.+10     	; 0x17ae <DIO_enuGetPinValue+0x128>
        }
        else
        {
            Local_enuErrorState = ES_OUT_OF_RANGE;
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <DIO_enuGetPinValue+0x128>
        }
    }   
    else
    {
        Local_enuErrorState = ES_NULL_POINTER;
    17aa:	83 e0       	ldi	r24, 0x03	; 3
    17ac:	89 83       	std	Y+1, r24	; 0x01
    } 

    return Local_enuErrorState;
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b0:	27 96       	adiw	r28, 0x07	; 7
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <GLCD_Command>:
#define RST		 PC5

#define TotalPage	 8

void GLCD_Command(char Command)		/* GLCD command function */
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	e1 97       	sbiw	r28, 0x31	; 49
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Command;		/* Copy command on data pin */
    17d8:	eb e3       	ldi	r30, 0x3B	; 59
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	89 a9       	ldd	r24, Y+49	; 0x31
    17de:	80 83       	st	Z, r24
	Command_Port &= ~(1 << RS);	/* Make RS LOW for command register*/
    17e0:	a5 e3       	ldi	r26, 0x35	; 53
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e5 e3       	ldi	r30, 0x35	; 53
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	8e 7f       	andi	r24, 0xFE	; 254
    17ec:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
    17ee:	a5 e3       	ldi	r26, 0x35	; 53
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e5 e3       	ldi	r30, 0x35	; 53
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	8d 7f       	andi	r24, 0xFD	; 253
    17fa:	8c 93       	st	X, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
    17fc:	a5 e3       	ldi	r26, 0x35	; 53
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e5 e3       	ldi	r30, 0x35	; 53
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	84 60       	ori	r24, 0x04	; 4
    1808:	8c 93       	st	X, r24
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	a0 ea       	ldi	r26, 0xA0	; 160
    1810:	b0 e4       	ldi	r27, 0x40	; 64
    1812:	8d a7       	std	Y+45, r24	; 0x2d
    1814:	9e a7       	std	Y+46, r25	; 0x2e
    1816:	af a7       	std	Y+47, r26	; 0x2f
    1818:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    181a:	6d a5       	ldd	r22, Y+45	; 0x2d
    181c:	7e a5       	ldd	r23, Y+46	; 0x2e
    181e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1820:	98 a9       	ldd	r25, Y+48	; 0x30
    1822:	2b ea       	ldi	r18, 0xAB	; 171
    1824:	3a ea       	ldi	r19, 0xAA	; 170
    1826:	4a ea       	ldi	r20, 0xAA	; 170
    1828:	50 e4       	ldi	r21, 0x40	; 64
    182a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	89 a7       	std	Y+41, r24	; 0x29
    1834:	9a a7       	std	Y+42, r25	; 0x2a
    1836:	ab a7       	std	Y+43, r26	; 0x2b
    1838:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    183a:	69 a5       	ldd	r22, Y+41	; 0x29
    183c:	7a a5       	ldd	r23, Y+42	; 0x2a
    183e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1840:	9c a5       	ldd	r25, Y+44	; 0x2c
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    184e:	88 23       	and	r24, r24
    1850:	1c f4       	brge	.+6      	; 0x1858 <GLCD_Command+0x96>
		__ticks = 1;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	88 a7       	std	Y+40, r24	; 0x28
    1856:	91 c0       	rjmp	.+290    	; 0x197a <GLCD_Command+0x1b8>
	else if (__tmp > 255)
    1858:	69 a5       	ldd	r22, Y+41	; 0x29
    185a:	7a a5       	ldd	r23, Y+42	; 0x2a
    185c:	8b a5       	ldd	r24, Y+43	; 0x2b
    185e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	4f e7       	ldi	r20, 0x7F	; 127
    1866:	53 e4       	ldi	r21, 0x43	; 67
    1868:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    186c:	18 16       	cp	r1, r24
    186e:	0c f0       	brlt	.+2      	; 0x1872 <GLCD_Command+0xb0>
    1870:	7b c0       	rjmp	.+246    	; 0x1968 <GLCD_Command+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1872:	6d a5       	ldd	r22, Y+45	; 0x2d
    1874:	7e a5       	ldd	r23, Y+46	; 0x2e
    1876:	8f a5       	ldd	r24, Y+47	; 0x2f
    1878:	98 a9       	ldd	r25, Y+48	; 0x30
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	4a e7       	ldi	r20, 0x7A	; 122
    1880:	54 e4       	ldi	r21, 0x44	; 68
    1882:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	8c a3       	std	Y+36, r24	; 0x24
    188c:	9d a3       	std	Y+37, r25	; 0x25
    188e:	ae a3       	std	Y+38, r26	; 0x26
    1890:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	6c a1       	ldd	r22, Y+36	; 0x24
    1894:	7d a1       	ldd	r23, Y+37	; 0x25
    1896:	8e a1       	ldd	r24, Y+38	; 0x26
    1898:	9f a1       	ldd	r25, Y+39	; 0x27
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a e7       	ldi	r20, 0x7A	; 122
    18a0:	55 e4       	ldi	r21, 0x45	; 69
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	88 a3       	std	Y+32, r24	; 0x20
    18ac:	99 a3       	std	Y+33, r25	; 0x21
    18ae:	aa a3       	std	Y+34, r26	; 0x22
    18b0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    18b2:	68 a1       	ldd	r22, Y+32	; 0x20
    18b4:	79 a1       	ldd	r23, Y+33	; 0x21
    18b6:	8a a1       	ldd	r24, Y+34	; 0x22
    18b8:	9b a1       	ldd	r25, Y+35	; 0x23
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <GLCD_Command+0x112>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	9f 8f       	std	Y+31, r25	; 0x1f
    18d0:	8e 8f       	std	Y+30, r24	; 0x1e
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <GLCD_Command+0x190>
	else if (__tmp > 65535)
    18d4:	68 a1       	ldd	r22, Y+32	; 0x20
    18d6:	79 a1       	ldd	r23, Y+33	; 0x21
    18d8:	8a a1       	ldd	r24, Y+34	; 0x22
    18da:	9b a1       	ldd	r25, Y+35	; 0x23
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <GLCD_Command+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	6c a1       	ldd	r22, Y+36	; 0x24
    18ee:	7d a1       	ldd	r23, Y+37	; 0x25
    18f0:	8e a1       	ldd	r24, Y+38	; 0x26
    18f2:	9f a1       	ldd	r25, Y+39	; 0x27
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9f 8f       	std	Y+31, r25	; 0x1f
    1912:	8e 8f       	std	Y+30, r24	; 0x1e
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <GLCD_Command+0x172>
    1916:	80 e9       	ldi	r24, 0x90	; 144
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	9d 8f       	std	Y+29, r25	; 0x1d
    191c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    191e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1920:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <GLCD_Command+0x160>
    1926:	9d 8f       	std	Y+29, r25	; 0x1d
    1928:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    192c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	9f 8f       	std	Y+31, r25	; 0x1f
    1932:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1936:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <GLCD_Command+0x154>
    193c:	24 c0       	rjmp	.+72     	; 0x1986 <GLCD_Command+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	68 a1       	ldd	r22, Y+32	; 0x20
    1940:	79 a1       	ldd	r23, Y+33	; 0x21
    1942:	8a a1       	ldd	r24, Y+34	; 0x22
    1944:	9b a1       	ldd	r25, Y+35	; 0x23
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9f 8f       	std	Y+31, r25	; 0x1f
    1950:	8e 8f       	std	Y+30, r24	; 0x1e
    1952:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1954:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1956:	9b 8f       	std	Y+27, r25	; 0x1b
    1958:	8a 8f       	std	Y+26, r24	; 0x1a
    195a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    195c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <GLCD_Command+0x19c>
    1962:	9b 8f       	std	Y+27, r25	; 0x1b
    1964:	8a 8f       	std	Y+26, r24	; 0x1a
    1966:	0f c0       	rjmp	.+30     	; 0x1986 <GLCD_Command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1968:	69 a5       	ldd	r22, Y+41	; 0x29
    196a:	7a a5       	ldd	r23, Y+42	; 0x2a
    196c:	8b a5       	ldd	r24, Y+43	; 0x2b
    196e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	88 a7       	std	Y+40, r24	; 0x28
    197a:	88 a5       	ldd	r24, Y+40	; 0x28
    197c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    197e:	89 8d       	ldd	r24, Y+25	; 0x19
    1980:	8a 95       	dec	r24
    1982:	f1 f7       	brne	.-4      	; 0x1980 <GLCD_Command+0x1be>
    1984:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    1986:	a5 e3       	ldi	r26, 0x35	; 53
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e5 e3       	ldi	r30, 0x35	; 53
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	8b 7f       	andi	r24, 0xFB	; 251
    1992:	8c 93       	st	X, r24
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a0 ea       	ldi	r26, 0xA0	; 160
    199a:	b0 e4       	ldi	r27, 0x40	; 64
    199c:	8d 8b       	std	Y+21, r24	; 0x15
    199e:	9e 8b       	std	Y+22, r25	; 0x16
    19a0:	af 8b       	std	Y+23, r26	; 0x17
    19a2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19a4:	6d 89       	ldd	r22, Y+21	; 0x15
    19a6:	7e 89       	ldd	r23, Y+22	; 0x16
    19a8:	8f 89       	ldd	r24, Y+23	; 0x17
    19aa:	98 8d       	ldd	r25, Y+24	; 0x18
    19ac:	2b ea       	ldi	r18, 0xAB	; 171
    19ae:	3a ea       	ldi	r19, 0xAA	; 170
    19b0:	4a ea       	ldi	r20, 0xAA	; 170
    19b2:	50 e4       	ldi	r21, 0x40	; 64
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	89 8b       	std	Y+17, r24	; 0x11
    19be:	9a 8b       	std	Y+18, r25	; 0x12
    19c0:	ab 8b       	std	Y+19, r26	; 0x13
    19c2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19c4:	69 89       	ldd	r22, Y+17	; 0x11
    19c6:	7a 89       	ldd	r23, Y+18	; 0x12
    19c8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ca:	9c 89       	ldd	r25, Y+20	; 0x14
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e8       	ldi	r20, 0x80	; 128
    19d2:	5f e3       	ldi	r21, 0x3F	; 63
    19d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19d8:	88 23       	and	r24, r24
    19da:	1c f4       	brge	.+6      	; 0x19e2 <GLCD_Command+0x220>
		__ticks = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	88 8b       	std	Y+16, r24	; 0x10
    19e0:	91 c0       	rjmp	.+290    	; 0x1b04 <GLCD_Command+0x342>
	else if (__tmp > 255)
    19e2:	69 89       	ldd	r22, Y+17	; 0x11
    19e4:	7a 89       	ldd	r23, Y+18	; 0x12
    19e6:	8b 89       	ldd	r24, Y+19	; 0x13
    19e8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4f e7       	ldi	r20, 0x7F	; 127
    19f0:	53 e4       	ldi	r21, 0x43	; 67
    19f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19f6:	18 16       	cp	r1, r24
    19f8:	0c f0       	brlt	.+2      	; 0x19fc <GLCD_Command+0x23a>
    19fa:	7b c0       	rjmp	.+246    	; 0x1af2 <GLCD_Command+0x330>
	{
		_delay_ms(__us / 1000.0);
    19fc:	6d 89       	ldd	r22, Y+21	; 0x15
    19fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1a00:	8f 89       	ldd	r24, Y+23	; 0x17
    1a02:	98 8d       	ldd	r25, Y+24	; 0x18
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4a e7       	ldi	r20, 0x7A	; 122
    1a0a:	54 e4       	ldi	r21, 0x44	; 68
    1a0c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	8c 87       	std	Y+12, r24	; 0x0c
    1a16:	9d 87       	std	Y+13, r25	; 0x0d
    1a18:	ae 87       	std	Y+14, r26	; 0x0e
    1a1a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a1e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a20:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a22:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	4a e7       	ldi	r20, 0x7A	; 122
    1a2a:	55 e4       	ldi	r21, 0x45	; 69
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	88 87       	std	Y+8, r24	; 0x08
    1a36:	99 87       	std	Y+9, r25	; 0x09
    1a38:	aa 87       	std	Y+10, r26	; 0x0a
    1a3a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a3c:	68 85       	ldd	r22, Y+8	; 0x08
    1a3e:	79 85       	ldd	r23, Y+9	; 0x09
    1a40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a42:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e8       	ldi	r20, 0x80	; 128
    1a4a:	5f e3       	ldi	r21, 0x3F	; 63
    1a4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a50:	88 23       	and	r24, r24
    1a52:	2c f4       	brge	.+10     	; 0x1a5e <GLCD_Command+0x29c>
		__ticks = 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	9f 83       	std	Y+7, r25	; 0x07
    1a5a:	8e 83       	std	Y+6, r24	; 0x06
    1a5c:	3f c0       	rjmp	.+126    	; 0x1adc <GLCD_Command+0x31a>
	else if (__tmp > 65535)
    1a5e:	68 85       	ldd	r22, Y+8	; 0x08
    1a60:	79 85       	ldd	r23, Y+9	; 0x09
    1a62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a64:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	3f ef       	ldi	r19, 0xFF	; 255
    1a6a:	4f e7       	ldi	r20, 0x7F	; 127
    1a6c:	57 e4       	ldi	r21, 0x47	; 71
    1a6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a72:	18 16       	cp	r1, r24
    1a74:	4c f5       	brge	.+82     	; 0x1ac8 <GLCD_Command+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a76:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a78:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9f 83       	std	Y+7, r25	; 0x07
    1a9c:	8e 83       	std	Y+6, r24	; 0x06
    1a9e:	0f c0       	rjmp	.+30     	; 0x1abe <GLCD_Command+0x2fc>
    1aa0:	80 e9       	ldi	r24, 0x90	; 144
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	9d 83       	std	Y+5, r25	; 0x05
    1aa6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <GLCD_Command+0x2ea>
    1ab0:	9d 83       	std	Y+5, r25	; 0x05
    1ab2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	9f 83       	std	Y+7, r25	; 0x07
    1abc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abe:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	69 f7       	brne	.-38     	; 0x1aa0 <GLCD_Command+0x2de>
    1ac6:	24 c0       	rjmp	.+72     	; 0x1b10 <GLCD_Command+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac8:	68 85       	ldd	r22, Y+8	; 0x08
    1aca:	79 85       	ldd	r23, Y+9	; 0x09
    1acc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ace:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	9f 83       	std	Y+7, r25	; 0x07
    1ada:	8e 83       	std	Y+6, r24	; 0x06
    1adc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ade:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae0:	9b 83       	std	Y+3, r25	; 0x03
    1ae2:	8a 83       	std	Y+2, r24	; 0x02
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <GLCD_Command+0x326>
    1aec:	9b 83       	std	Y+3, r25	; 0x03
    1aee:	8a 83       	std	Y+2, r24	; 0x02
    1af0:	0f c0       	rjmp	.+30     	; 0x1b10 <GLCD_Command+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1af2:	69 89       	ldd	r22, Y+17	; 0x11
    1af4:	7a 89       	ldd	r23, Y+18	; 0x12
    1af6:	8b 89       	ldd	r24, Y+19	; 0x13
    1af8:	9c 89       	ldd	r25, Y+20	; 0x14
    1afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	88 8b       	std	Y+16, r24	; 0x10
    1b04:	88 89       	ldd	r24, Y+16	; 0x10
    1b06:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	8a 95       	dec	r24
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <GLCD_Command+0x348>
    1b0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    1b10:	e1 96       	adiw	r28, 0x31	; 49
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <GLCD_Data>:

void GLCD_Data(char Data)		/* GLCD data function */
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	e1 97       	sbiw	r28, 0x31	; 49
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Data;		/* Copy data on data pin */
    1b38:	eb e3       	ldi	r30, 0x3B	; 59
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	89 a9       	ldd	r24, Y+49	; 0x31
    1b3e:	80 83       	st	Z, r24
	Command_Port |=  (1 << RS);	/* Make RS HIGH for data register */
    1b40:	a5 e3       	ldi	r26, 0x35	; 53
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e5 e3       	ldi	r30, 0x35	; 53
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	81 60       	ori	r24, 0x01	; 1
    1b4c:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
    1b4e:	a5 e3       	ldi	r26, 0x35	; 53
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e5 e3       	ldi	r30, 0x35	; 53
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	8d 7f       	andi	r24, 0xFD	; 253
    1b5a:	8c 93       	st	X, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
    1b5c:	a5 e3       	ldi	r26, 0x35	; 53
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e5 e3       	ldi	r30, 0x35	; 53
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	84 60       	ori	r24, 0x04	; 4
    1b68:	8c 93       	st	X, r24
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	a0 ea       	ldi	r26, 0xA0	; 160
    1b70:	b0 e4       	ldi	r27, 0x40	; 64
    1b72:	8d a7       	std	Y+45, r24	; 0x2d
    1b74:	9e a7       	std	Y+46, r25	; 0x2e
    1b76:	af a7       	std	Y+47, r26	; 0x2f
    1b78:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b7a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b7c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b80:	98 a9       	ldd	r25, Y+48	; 0x30
    1b82:	2b ea       	ldi	r18, 0xAB	; 171
    1b84:	3a ea       	ldi	r19, 0xAA	; 170
    1b86:	4a ea       	ldi	r20, 0xAA	; 170
    1b88:	50 e4       	ldi	r21, 0x40	; 64
    1b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	89 a7       	std	Y+41, r24	; 0x29
    1b94:	9a a7       	std	Y+42, r25	; 0x2a
    1b96:	ab a7       	std	Y+43, r26	; 0x2b
    1b98:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1b9a:	69 a5       	ldd	r22, Y+41	; 0x29
    1b9c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e8       	ldi	r20, 0x80	; 128
    1ba8:	5f e3       	ldi	r21, 0x3F	; 63
    1baa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bae:	88 23       	and	r24, r24
    1bb0:	1c f4       	brge	.+6      	; 0x1bb8 <GLCD_Data+0x96>
		__ticks = 1;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	88 a7       	std	Y+40, r24	; 0x28
    1bb6:	91 c0       	rjmp	.+290    	; 0x1cda <GLCD_Data+0x1b8>
	else if (__tmp > 255)
    1bb8:	69 a5       	ldd	r22, Y+41	; 0x29
    1bba:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bbe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	53 e4       	ldi	r21, 0x43	; 67
    1bc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	0c f0       	brlt	.+2      	; 0x1bd2 <GLCD_Data+0xb0>
    1bd0:	7b c0       	rjmp	.+246    	; 0x1cc8 <GLCD_Data+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1bd2:	6d a5       	ldd	r22, Y+45	; 0x2d
    1bd4:	7e a5       	ldd	r23, Y+46	; 0x2e
    1bd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	4a e7       	ldi	r20, 0x7A	; 122
    1be0:	54 e4       	ldi	r21, 0x44	; 68
    1be2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	8c a3       	std	Y+36, r24	; 0x24
    1bec:	9d a3       	std	Y+37, r25	; 0x25
    1bee:	ae a3       	std	Y+38, r26	; 0x26
    1bf0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf2:	6c a1       	ldd	r22, Y+36	; 0x24
    1bf4:	7d a1       	ldd	r23, Y+37	; 0x25
    1bf6:	8e a1       	ldd	r24, Y+38	; 0x26
    1bf8:	9f a1       	ldd	r25, Y+39	; 0x27
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	4a e7       	ldi	r20, 0x7A	; 122
    1c00:	55 e4       	ldi	r21, 0x45	; 69
    1c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	88 a3       	std	Y+32, r24	; 0x20
    1c0c:	99 a3       	std	Y+33, r25	; 0x21
    1c0e:	aa a3       	std	Y+34, r26	; 0x22
    1c10:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1c12:	68 a1       	ldd	r22, Y+32	; 0x20
    1c14:	79 a1       	ldd	r23, Y+33	; 0x21
    1c16:	8a a1       	ldd	r24, Y+34	; 0x22
    1c18:	9b a1       	ldd	r25, Y+35	; 0x23
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e8       	ldi	r20, 0x80	; 128
    1c20:	5f e3       	ldi	r21, 0x3F	; 63
    1c22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c26:	88 23       	and	r24, r24
    1c28:	2c f4       	brge	.+10     	; 0x1c34 <GLCD_Data+0x112>
		__ticks = 1;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9f 8f       	std	Y+31, r25	; 0x1f
    1c30:	8e 8f       	std	Y+30, r24	; 0x1e
    1c32:	3f c0       	rjmp	.+126    	; 0x1cb2 <GLCD_Data+0x190>
	else if (__tmp > 65535)
    1c34:	68 a1       	ldd	r22, Y+32	; 0x20
    1c36:	79 a1       	ldd	r23, Y+33	; 0x21
    1c38:	8a a1       	ldd	r24, Y+34	; 0x22
    1c3a:	9b a1       	ldd	r25, Y+35	; 0x23
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	4c f5       	brge	.+82     	; 0x1c9e <GLCD_Data+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4c:	6c a1       	ldd	r22, Y+36	; 0x24
    1c4e:	7d a1       	ldd	r23, Y+37	; 0x25
    1c50:	8e a1       	ldd	r24, Y+38	; 0x26
    1c52:	9f a1       	ldd	r25, Y+39	; 0x27
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e2       	ldi	r20, 0x20	; 32
    1c5a:	51 e4       	ldi	r21, 0x41	; 65
    1c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9f 8f       	std	Y+31, r25	; 0x1f
    1c72:	8e 8f       	std	Y+30, r24	; 0x1e
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <GLCD_Data+0x172>
    1c76:	80 e9       	ldi	r24, 0x90	; 144
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	9d 8f       	std	Y+29, r25	; 0x1d
    1c7c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c80:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <GLCD_Data+0x160>
    1c86:	9d 8f       	std	Y+29, r25	; 0x1d
    1c88:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c8c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	9f 8f       	std	Y+31, r25	; 0x1f
    1c92:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c96:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	69 f7       	brne	.-38     	; 0x1c76 <GLCD_Data+0x154>
    1c9c:	24 c0       	rjmp	.+72     	; 0x1ce6 <GLCD_Data+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9e:	68 a1       	ldd	r22, Y+32	; 0x20
    1ca0:	79 a1       	ldd	r23, Y+33	; 0x21
    1ca2:	8a a1       	ldd	r24, Y+34	; 0x22
    1ca4:	9b a1       	ldd	r25, Y+35	; 0x23
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9f 8f       	std	Y+31, r25	; 0x1f
    1cb0:	8e 8f       	std	Y+30, r24	; 0x1e
    1cb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cb4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cb6:	9b 8f       	std	Y+27, r25	; 0x1b
    1cb8:	8a 8f       	std	Y+26, r24	; 0x1a
    1cba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cbc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <GLCD_Data+0x19c>
    1cc2:	9b 8f       	std	Y+27, r25	; 0x1b
    1cc4:	8a 8f       	std	Y+26, r24	; 0x1a
    1cc6:	0f c0       	rjmp	.+30     	; 0x1ce6 <GLCD_Data+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cc8:	69 a5       	ldd	r22, Y+41	; 0x29
    1cca:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ccc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cce:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	88 a7       	std	Y+40, r24	; 0x28
    1cda:	88 a5       	ldd	r24, Y+40	; 0x28
    1cdc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cde:	89 8d       	ldd	r24, Y+25	; 0x19
    1ce0:	8a 95       	dec	r24
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <GLCD_Data+0x1be>
    1ce4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    1ce6:	a5 e3       	ldi	r26, 0x35	; 53
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e5 e3       	ldi	r30, 0x35	; 53
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	8b 7f       	andi	r24, 0xFB	; 251
    1cf2:	8c 93       	st	X, r24
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	a0 ea       	ldi	r26, 0xA0	; 160
    1cfa:	b0 e4       	ldi	r27, 0x40	; 64
    1cfc:	8d 8b       	std	Y+21, r24	; 0x15
    1cfe:	9e 8b       	std	Y+22, r25	; 0x16
    1d00:	af 8b       	std	Y+23, r26	; 0x17
    1d02:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d04:	6d 89       	ldd	r22, Y+21	; 0x15
    1d06:	7e 89       	ldd	r23, Y+22	; 0x16
    1d08:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0c:	2b ea       	ldi	r18, 0xAB	; 171
    1d0e:	3a ea       	ldi	r19, 0xAA	; 170
    1d10:	4a ea       	ldi	r20, 0xAA	; 170
    1d12:	50 e4       	ldi	r21, 0x40	; 64
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	89 8b       	std	Y+17, r24	; 0x11
    1d1e:	9a 8b       	std	Y+18, r25	; 0x12
    1d20:	ab 8b       	std	Y+19, r26	; 0x13
    1d22:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d24:	69 89       	ldd	r22, Y+17	; 0x11
    1d26:	7a 89       	ldd	r23, Y+18	; 0x12
    1d28:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e8       	ldi	r20, 0x80	; 128
    1d32:	5f e3       	ldi	r21, 0x3F	; 63
    1d34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d38:	88 23       	and	r24, r24
    1d3a:	1c f4       	brge	.+6      	; 0x1d42 <GLCD_Data+0x220>
		__ticks = 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	88 8b       	std	Y+16, r24	; 0x10
    1d40:	91 c0       	rjmp	.+290    	; 0x1e64 <GLCD_Data+0x342>
	else if (__tmp > 255)
    1d42:	69 89       	ldd	r22, Y+17	; 0x11
    1d44:	7a 89       	ldd	r23, Y+18	; 0x12
    1d46:	8b 89       	ldd	r24, Y+19	; 0x13
    1d48:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	4f e7       	ldi	r20, 0x7F	; 127
    1d50:	53 e4       	ldi	r21, 0x43	; 67
    1d52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d56:	18 16       	cp	r1, r24
    1d58:	0c f0       	brlt	.+2      	; 0x1d5c <GLCD_Data+0x23a>
    1d5a:	7b c0       	rjmp	.+246    	; 0x1e52 <GLCD_Data+0x330>
	{
		_delay_ms(__us / 1000.0);
    1d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d60:	8f 89       	ldd	r24, Y+23	; 0x17
    1d62:	98 8d       	ldd	r25, Y+24	; 0x18
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	4a e7       	ldi	r20, 0x7A	; 122
    1d6a:	54 e4       	ldi	r21, 0x44	; 68
    1d6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	8c 87       	std	Y+12, r24	; 0x0c
    1d76:	9d 87       	std	Y+13, r25	; 0x0d
    1d78:	ae 87       	std	Y+14, r26	; 0x0e
    1d7a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d7e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d80:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d82:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	4a e7       	ldi	r20, 0x7A	; 122
    1d8a:	55 e4       	ldi	r21, 0x45	; 69
    1d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	88 87       	std	Y+8, r24	; 0x08
    1d96:	99 87       	std	Y+9, r25	; 0x09
    1d98:	aa 87       	std	Y+10, r26	; 0x0a
    1d9a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d9c:	68 85       	ldd	r22, Y+8	; 0x08
    1d9e:	79 85       	ldd	r23, Y+9	; 0x09
    1da0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1da2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <GLCD_Data+0x29c>
		__ticks = 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9f 83       	std	Y+7, r25	; 0x07
    1dba:	8e 83       	std	Y+6, r24	; 0x06
    1dbc:	3f c0       	rjmp	.+126    	; 0x1e3c <GLCD_Data+0x31a>
	else if (__tmp > 65535)
    1dbe:	68 85       	ldd	r22, Y+8	; 0x08
    1dc0:	79 85       	ldd	r23, Y+9	; 0x09
    1dc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	3f ef       	ldi	r19, 0xFF	; 255
    1dca:	4f e7       	ldi	r20, 0x7F	; 127
    1dcc:	57 e4       	ldi	r21, 0x47	; 71
    1dce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd2:	18 16       	cp	r1, r24
    1dd4:	4c f5       	brge	.+82     	; 0x1e28 <GLCD_Data+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dd8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dda:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ddc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9f 83       	std	Y+7, r25	; 0x07
    1dfc:	8e 83       	std	Y+6, r24	; 0x06
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <GLCD_Data+0x2fc>
    1e00:	80 e9       	ldi	r24, 0x90	; 144
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	9d 83       	std	Y+5, r25	; 0x05
    1e06:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e08:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <GLCD_Data+0x2ea>
    1e10:	9d 83       	std	Y+5, r25	; 0x05
    1e12:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e14:	8e 81       	ldd	r24, Y+6	; 0x06
    1e16:	9f 81       	ldd	r25, Y+7	; 0x07
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	9f 83       	std	Y+7, r25	; 0x07
    1e1c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e20:	9f 81       	ldd	r25, Y+7	; 0x07
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	69 f7       	brne	.-38     	; 0x1e00 <GLCD_Data+0x2de>
    1e26:	24 c0       	rjmp	.+72     	; 0x1e70 <GLCD_Data+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e28:	68 85       	ldd	r22, Y+8	; 0x08
    1e2a:	79 85       	ldd	r23, Y+9	; 0x09
    1e2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9f 83       	std	Y+7, r25	; 0x07
    1e3a:	8e 83       	std	Y+6, r24	; 0x06
    1e3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e40:	9b 83       	std	Y+3, r25	; 0x03
    1e42:	8a 83       	std	Y+2, r24	; 0x02
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	9b 81       	ldd	r25, Y+3	; 0x03
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <GLCD_Data+0x326>
    1e4c:	9b 83       	std	Y+3, r25	; 0x03
    1e4e:	8a 83       	std	Y+2, r24	; 0x02
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <GLCD_Data+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e52:	69 89       	ldd	r22, Y+17	; 0x11
    1e54:	7a 89       	ldd	r23, Y+18	; 0x12
    1e56:	8b 89       	ldd	r24, Y+19	; 0x13
    1e58:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	88 8b       	std	Y+16, r24	; 0x10
    1e64:	88 89       	ldd	r24, Y+16	; 0x10
    1e66:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	8a 95       	dec	r24
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <GLCD_Data+0x348>
    1e6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    1e70:	e1 96       	adiw	r28, 0x31	; 49
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <GLCD_Init>:

void GLCD_Init()			/* GLCD initialize function */
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	2e 97       	sbiw	r28, 0x0e	; 14
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
	Data_Port_Dir = 0xFF;
    1e96:	ea e3       	ldi	r30, 0x3A	; 58
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	8f ef       	ldi	r24, 0xFF	; 255
    1e9c:	80 83       	st	Z, r24
	Command_Port_Dir = 0xFF;
    1e9e:	e4 e3       	ldi	r30, 0x34	; 52
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	8f ef       	ldi	r24, 0xFF	; 255
    1ea4:	80 83       	st	Z, r24
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
    1ea6:	a5 e3       	ldi	r26, 0x35	; 53
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e5 e3       	ldi	r30, 0x35	; 53
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	88 63       	ori	r24, 0x38	; 56
    1eb2:	8c 93       	st	X, r24
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a0 ea       	ldi	r26, 0xA0	; 160
    1eba:	b1 e4       	ldi	r27, 0x41	; 65
    1ebc:	8b 87       	std	Y+11, r24	; 0x0b
    1ebe:	9c 87       	std	Y+12, r25	; 0x0c
    1ec0:	ad 87       	std	Y+13, r26	; 0x0d
    1ec2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	4a e7       	ldi	r20, 0x7A	; 122
    1ed2:	55 e4       	ldi	r21, 0x45	; 69
    1ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	8f 83       	std	Y+7, r24	; 0x07
    1ede:	98 87       	std	Y+8, r25	; 0x08
    1ee0:	a9 87       	std	Y+9, r26	; 0x09
    1ee2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee6:	78 85       	ldd	r23, Y+8	; 0x08
    1ee8:	89 85       	ldd	r24, Y+9	; 0x09
    1eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e8       	ldi	r20, 0x80	; 128
    1ef2:	5f e3       	ldi	r21, 0x3F	; 63
    1ef4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef8:	88 23       	and	r24, r24
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <GLCD_Init+0x84>
		__ticks = 1;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9e 83       	std	Y+6, r25	; 0x06
    1f02:	8d 83       	std	Y+5, r24	; 0x05
    1f04:	3f c0       	rjmp	.+126    	; 0x1f84 <GLCD_Init+0x102>
	else if (__tmp > 65535)
    1f06:	6f 81       	ldd	r22, Y+7	; 0x07
    1f08:	78 85       	ldd	r23, Y+8	; 0x08
    1f0a:	89 85       	ldd	r24, Y+9	; 0x09
    1f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	3f ef       	ldi	r19, 0xFF	; 255
    1f12:	4f e7       	ldi	r20, 0x7F	; 127
    1f14:	57 e4       	ldi	r21, 0x47	; 71
    1f16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f1a:	18 16       	cp	r1, r24
    1f1c:	4c f5       	brge	.+82     	; 0x1f70 <GLCD_Init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e2       	ldi	r20, 0x20	; 32
    1f2c:	51 e4       	ldi	r21, 0x41	; 65
    1f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	bc 01       	movw	r22, r24
    1f38:	cd 01       	movw	r24, r26
    1f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
    1f46:	0f c0       	rjmp	.+30     	; 0x1f66 <GLCD_Init+0xe4>
    1f48:	80 e9       	ldi	r24, 0x90	; 144
    1f4a:	91 e0       	ldi	r25, 0x01	; 1
    1f4c:	9c 83       	std	Y+4, r25	; 0x04
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <GLCD_Init+0xd2>
    1f58:	9c 83       	std	Y+4, r25	; 0x04
    1f5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	9e 83       	std	Y+6, r25	; 0x06
    1f64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	69 f7       	brne	.-38     	; 0x1f48 <GLCD_Init+0xc6>
    1f6e:	14 c0       	rjmp	.+40     	; 0x1f98 <GLCD_Init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f70:	6f 81       	ldd	r22, Y+7	; 0x07
    1f72:	78 85       	ldd	r23, Y+8	; 0x08
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	9e 81       	ldd	r25, Y+6	; 0x06
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <GLCD_Init+0x10e>
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	GLCD_Command(0x3E);		/* Display OFF */
    1f98:	8e e3       	ldi	r24, 0x3E	; 62
    1f9a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
	GLCD_Command(0x40);		/* Set Y address (column=0) */
    1f9e:	80 e4       	ldi	r24, 0x40	; 64
    1fa0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
    1fa4:	88 eb       	ldi	r24, 0xB8	; 184
    1fa6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
	GLCD_Command(0xC0);		/* Set z address (start line=0) */
    1faa:	80 ec       	ldi	r24, 0xC0	; 192
    1fac:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
	GLCD_Command(0x3F);		/* Display ON */
    1fb0:	8f e3       	ldi	r24, 0x3F	; 63
    1fb2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
}
    1fb6:	2e 96       	adiw	r28, 0x0e	; 14
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	f8 94       	cli
    1fbc:	de bf       	out	0x3e, r29	; 62
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	cd bf       	out	0x3d, r28	; 61
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <GLCD_ClearAll>:

void GLCD_ClearAll()			/* GLCD all display clear function */
{
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <GLCD_ClearAll+0x6>
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <GLCD_ClearAll+0x8>
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
    1fd4:	a5 e3       	ldi	r26, 0x35	; 53
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e5 e3       	ldi	r30, 0x35	; 53
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	88 61       	ori	r24, 0x18	; 24
    1fe0:	8c 93       	st	X, r24
	for(i = 0; i < TotalPage; i++)
    1fe2:	1c 82       	std	Y+4, r1	; 0x04
    1fe4:	1b 82       	std	Y+3, r1	; 0x03
    1fe6:	19 c0       	rjmp	.+50     	; 0x201a <GLCD_ClearAll+0x52>
	{
		GLCD_Command((0xB8) + i);/* Increment page */
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	88 54       	subi	r24, 0x48	; 72
    1fec:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
		for(j = 0; j < 64; j++)
    1ff0:	1a 82       	std	Y+2, r1	; 0x02
    1ff2:	19 82       	std	Y+1, r1	; 0x01
    1ff4:	08 c0       	rjmp	.+16     	; 0x2006 <GLCD_ClearAll+0x3e>
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GLCD_Data>
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);/* Increment page */
		for(j = 0; j < 64; j++)
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	9a 81       	ldd	r25, Y+2	; 0x02
    200a:	80 34       	cpi	r24, 0x40	; 64
    200c:	91 05       	cpc	r25, r1
    200e:	9c f3       	brlt	.-26     	; 0x1ff6 <GLCD_ClearAll+0x2e>
void GLCD_ClearAll()			/* GLCD all display clear function */
{
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	9c 81       	ldd	r25, Y+4	; 0x04
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	9c 83       	std	Y+4, r25	; 0x04
    2018:	8b 83       	std	Y+3, r24	; 0x03
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	88 30       	cpi	r24, 0x08	; 8
    2020:	91 05       	cpc	r25, r1
    2022:	14 f3       	brlt	.-60     	; 0x1fe8 <GLCD_ClearAll+0x20>
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
		}
	}
	GLCD_Command(0x40);		/* Set Y address (column=0) */
    2024:	80 e4       	ldi	r24, 0x40	; 64
    2026:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
    202a:	88 eb       	ldi	r24, 0xB8	; 184
    202c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <GLCD_String>:

void GLCD_String(char page_no, char *str)/* GLCD string write function */
{
    203e:	0f 93       	push	r16
    2040:	1f 93       	push	r17
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	2f 97       	sbiw	r28, 0x0f	; 15
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	8d 87       	std	Y+13, r24	; 0x0d
    2058:	7f 87       	std	Y+15, r23	; 0x0f
    205a:	6e 87       	std	Y+14, r22	; 0x0e
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
    205c:	8d 85       	ldd	r24, Y+13	; 0x0d
    205e:	88 2f       	mov	r24, r24
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	88 54       	subi	r24, 0x48	; 72
    2064:	9f 4f       	sbci	r25, 0xFF	; 255
    2066:	98 87       	std	Y+8, r25	; 0x08
    2068:	8f 83       	std	Y+7, r24	; 0x07
	unsigned int Y_address = 0;
    206a:	1e 82       	std	Y+6, r1	; 0x06
    206c:	1d 82       	std	Y+5, r1	; 0x05
	float Page_inc = 0.5;
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 e0       	ldi	r26, 0x00	; 0
    2074:	bf e3       	ldi	r27, 0x3F	; 63
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	9a 83       	std	Y+2, r25	; 0x02
    207a:	ab 83       	std	Y+3, r26	; 0x03
    207c:	bc 83       	std	Y+4, r27	; 0x04

	Command_Port |= (1 << CS1);	/* Select Left half of display */
    207e:	a5 e3       	ldi	r26, 0x35	; 53
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e5 e3       	ldi	r30, 0x35	; 53
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	88 60       	ori	r24, 0x08	; 8
    208a:	8c 93       	st	X, r24
	Command_Port &= ~(1 << CS2);
    208c:	a5 e3       	ldi	r26, 0x35	; 53
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e5 e3       	ldi	r30, 0x35	; 53
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	8f 7e       	andi	r24, 0xEF	; 239
    2098:	8c 93       	st	X, r24

	GLCD_Command(Page);
    209a:	8f 81       	ldd	r24, Y+7	; 0x07
    209c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
    20a0:	1c 86       	std	Y+12, r1	; 0x0c
    20a2:	1b 86       	std	Y+11, r1	; 0x0b
    20a4:	16 c2       	rjmp	.+1068   	; 0x24d2 <GLCD_String+0x494>
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
    20a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	96 95       	lsr	r25
    20ae:	98 2f       	mov	r25, r24
    20b0:	88 27       	eor	r24, r24
    20b2:	97 95       	ror	r25
    20b4:	87 95       	ror	r24
    20b6:	90 95       	com	r25
    20b8:	81 95       	neg	r24
    20ba:	9f 4f       	sbci	r25, 0xFF	; 255
    20bc:	85 50       	subi	r24, 0x05	; 5
    20be:	9c 4f       	sbci	r25, 0xFC	; 252
    20c0:	9c 01       	movw	r18, r24
    20c2:	8d 81       	ldd	r24, Y+5	; 0x05
    20c4:	9e 81       	ldd	r25, Y+6	; 0x06
    20c6:	28 17       	cp	r18, r24
    20c8:	39 07       	cpc	r19, r25
    20ca:	08 f4       	brcc	.+2      	; 0x20ce <GLCD_String+0x90>
    20cc:	0d c2       	rjmp	.+1050   	; 0x24e8 <GLCD_String+0x4aa>
		break;
		if (str[i]!=32)
    20ce:	2e 85       	ldd	r18, Y+14	; 0x0e
    20d0:	3f 85       	ldd	r19, Y+15	; 0x0f
    20d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    20d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    20d6:	f9 01       	movw	r30, r18
    20d8:	e8 0f       	add	r30, r24
    20da:	f9 1f       	adc	r31, r25
    20dc:	80 81       	ld	r24, Z
    20de:	80 32       	cpi	r24, 0x20	; 32
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <GLCD_String+0xa6>
    20e2:	80 c0       	rjmp	.+256    	; 0x21e4 <GLCD_String+0x1a6>
		{
			for (column=1; column<=FontWidth; column++)
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9a 87       	std	Y+10, r25	; 0x0a
    20ea:	89 87       	std	Y+9, r24	; 0x09
    20ec:	75 c0       	rjmp	.+234    	; 0x21d8 <GLCD_String+0x19a>
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
    20ee:	2d 81       	ldd	r18, Y+5	; 0x05
    20f0:	3e 81       	ldd	r19, Y+6	; 0x06
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	89 01       	movw	r16, r18
    20f8:	08 0f       	add	r16, r24
    20fa:	19 1f       	adc	r17, r25
    20fc:	69 81       	ldd	r22, Y+1	; 0x01
    20fe:	7a 81       	ldd	r23, Y+2	; 0x02
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	9c 81       	ldd	r25, Y+4	; 0x04
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	96 95       	lsr	r25
    2122:	98 2f       	mov	r25, r24
    2124:	88 27       	eor	r24, r24
    2126:	97 95       	ror	r25
    2128:	87 95       	ror	r24
    212a:	08 17       	cp	r16, r24
    212c:	19 07       	cpc	r17, r25
    212e:	09 f0       	breq	.+2      	; 0x2132 <GLCD_String+0xf4>
    2130:	4e c0       	rjmp	.+156    	; 0x21ce <GLCD_String+0x190>
				{
					if (column == FontWidth)
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	85 30       	cpi	r24, 0x05	; 5
    2138:	91 05       	cpc	r25, r1
    213a:	09 f4       	brne	.+2      	; 0x213e <GLCD_String+0x100>
    213c:	53 c0       	rjmp	.+166    	; 0x21e4 <GLCD_String+0x1a6>
					break;
					GLCD_Command(0x40);
    213e:	80 e4       	ldi	r24, 0x40	; 64
    2140:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
					Y_address = Y_address + column;
    2144:	2d 81       	ldd	r18, Y+5	; 0x05
    2146:	3e 81       	ldd	r19, Y+6	; 0x06
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	9a 85       	ldd	r25, Y+10	; 0x0a
    214c:	82 0f       	add	r24, r18
    214e:	93 1f       	adc	r25, r19
    2150:	9e 83       	std	Y+6, r25	; 0x06
    2152:	8d 83       	std	Y+5, r24	; 0x05
					Command_Port ^= (1 << CS1);
    2154:	a5 e3       	ldi	r26, 0x35	; 53
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e5 e3       	ldi	r30, 0x35	; 53
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	90 81       	ld	r25, Z
    215e:	88 e0       	ldi	r24, 0x08	; 8
    2160:	89 27       	eor	r24, r25
    2162:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    2164:	a5 e3       	ldi	r26, 0x35	; 53
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e5 e3       	ldi	r30, 0x35	; 53
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	90 81       	ld	r25, Z
    216e:	80 e1       	ldi	r24, 0x10	; 16
    2170:	89 27       	eor	r24, r25
    2172:	8c 93       	st	X, r24
					GLCD_Command(Page + Page_inc);
    2174:	8f 81       	ldd	r24, Y+7	; 0x07
    2176:	98 85       	ldd	r25, Y+8	; 0x08
    2178:	cc 01       	movw	r24, r24
    217a:	a0 e0       	ldi	r26, 0x00	; 0
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	29 81       	ldd	r18, Y+1	; 0x01
    2190:	3a 81       	ldd	r19, Y+2	; 0x02
    2192:	4b 81       	ldd	r20, Y+3	; 0x03
    2194:	5c 81       	ldd	r21, Y+4	; 0x04
    2196:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    21ae:	69 81       	ldd	r22, Y+1	; 0x01
    21b0:	7a 81       	ldd	r23, Y+2	; 0x02
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	9c 81       	ldd	r25, Y+4	; 0x04
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	5f e3       	ldi	r21, 0x3F	; 63
    21be:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	9a 83       	std	Y+2, r25	; 0x02
    21ca:	ab 83       	std	Y+3, r26	; 0x03
    21cc:	bc 83       	std	Y+4, r27	; 0x04
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
		break;
		if (str[i]!=32)
		{
			for (column=1; column<=FontWidth; column++)
    21ce:	89 85       	ldd	r24, Y+9	; 0x09
    21d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	9a 87       	std	Y+10, r25	; 0x0a
    21d6:	89 87       	std	Y+9, r24	; 0x09
    21d8:	89 85       	ldd	r24, Y+9	; 0x09
    21da:	9a 85       	ldd	r25, Y+10	; 0x0a
    21dc:	86 30       	cpi	r24, 0x06	; 6
    21de:	91 05       	cpc	r25, r1
    21e0:	08 f4       	brcc	.+2      	; 0x21e4 <GLCD_String+0x1a6>
    21e2:	85 cf       	rjmp	.-246    	; 0x20ee <GLCD_String+0xb0>
					GLCD_Command(Page + Page_inc);
					Page_inc = Page_inc + 0.5;
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
    21e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e6:	88 2f       	mov	r24, r24
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	96 95       	lsr	r25
    21ec:	98 2f       	mov	r25, r24
    21ee:	88 27       	eor	r24, r24
    21f0:	97 95       	ror	r25
    21f2:	87 95       	ror	r24
    21f4:	90 95       	com	r25
    21f6:	81 95       	neg	r24
    21f8:	9f 4f       	sbci	r25, 0xFF	; 255
    21fa:	85 50       	subi	r24, 0x05	; 5
    21fc:	9c 4f       	sbci	r25, 0xFC	; 252
    21fe:	9c 01       	movw	r18, r24
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	9e 81       	ldd	r25, Y+6	; 0x06
    2204:	28 17       	cp	r18, r24
    2206:	39 07       	cpc	r19, r25
    2208:	08 f4       	brcc	.+2      	; 0x220c <GLCD_String+0x1ce>
    220a:	6e c1       	rjmp	.+732    	; 0x24e8 <GLCD_String+0x4aa>
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
    220c:	2e 85       	ldd	r18, Y+14	; 0x0e
    220e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2210:	8b 85       	ldd	r24, Y+11	; 0x0b
    2212:	9c 85       	ldd	r25, Y+12	; 0x0c
    2214:	f9 01       	movw	r30, r18
    2216:	e8 0f       	add	r30, r24
    2218:	f9 1f       	adc	r31, r25
    221a:	80 81       	ld	r24, Z
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	c9 01       	movw	r24, r18
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	82 0f       	add	r24, r18
    2228:	93 1f       	adc	r25, r19
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	88 0f       	add	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	82 0f       	add	r24, r18
    2238:	93 1f       	adc	r25, r19
    223a:	8c 50       	subi	r24, 0x0C	; 12
    223c:	93 40       	sbci	r25, 0x03	; 3
    223e:	8e 58       	subi	r24, 0x8E	; 142
    2240:	9e 4f       	sbci	r25, 0xFE	; 254
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	59 f0       	breq	.+22     	; 0x225c <GLCD_String+0x21e>
    2246:	2e 85       	ldd	r18, Y+14	; 0x0e
    2248:	3f 85       	ldd	r19, Y+15	; 0x0f
    224a:	8b 85       	ldd	r24, Y+11	; 0x0b
    224c:	9c 85       	ldd	r25, Y+12	; 0x0c
    224e:	f9 01       	movw	r30, r18
    2250:	e8 0f       	add	r30, r24
    2252:	f9 1f       	adc	r31, r25
    2254:	80 81       	ld	r24, Z
    2256:	80 32       	cpi	r24, 0x20	; 32
    2258:	09 f0       	breq	.+2      	; 0x225c <GLCD_String+0x21e>
    225a:	76 c0       	rjmp	.+236    	; 0x2348 <GLCD_String+0x30a>
		{
			for(column=0; column<FontWidth; column++)
    225c:	1a 86       	std	Y+10, r1	; 0x0a
    225e:	19 86       	std	Y+9, r1	; 0x09
    2260:	6c c0       	rjmp	.+216    	; 0x233a <GLCD_String+0x2fc>
			{
				GLCD_Data(font[str[i]-32][column]);
    2262:	2e 85       	ldd	r18, Y+14	; 0x0e
    2264:	3f 85       	ldd	r19, Y+15	; 0x0f
    2266:	8b 85       	ldd	r24, Y+11	; 0x0b
    2268:	9c 85       	ldd	r25, Y+12	; 0x0c
    226a:	f9 01       	movw	r30, r18
    226c:	e8 0f       	add	r30, r24
    226e:	f9 1f       	adc	r31, r25
    2270:	80 81       	ld	r24, Z
    2272:	88 2f       	mov	r24, r24
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	9c 01       	movw	r18, r24
    2278:	20 52       	subi	r18, 0x20	; 32
    227a:	30 40       	sbci	r19, 0x00	; 0
    227c:	49 85       	ldd	r20, Y+9	; 0x09
    227e:	5a 85       	ldd	r21, Y+10	; 0x0a
    2280:	c9 01       	movw	r24, r18
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	82 0f       	add	r24, r18
    228c:	93 1f       	adc	r25, r19
    228e:	84 0f       	add	r24, r20
    2290:	95 1f       	adc	r25, r21
    2292:	fc 01       	movw	r30, r24
    2294:	ee 58       	subi	r30, 0x8E	; 142
    2296:	fe 4f       	sbci	r31, 0xFE	; 254
    2298:	80 81       	ld	r24, Z
    229a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GLCD_Data>
				if((Y_address+1)%64==0)
    229e:	8d 81       	ldd	r24, Y+5	; 0x05
    22a0:	9e 81       	ldd	r25, Y+6	; 0x06
    22a2:	01 96       	adiw	r24, 0x01	; 1
    22a4:	8f 73       	andi	r24, 0x3F	; 63
    22a6:	90 70       	andi	r25, 0x00	; 0
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	e9 f5       	brne	.+122    	; 0x2326 <GLCD_String+0x2e8>
				{
					Command_Port ^= (1 << CS1);
    22ac:	a5 e3       	ldi	r26, 0x35	; 53
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e5 e3       	ldi	r30, 0x35	; 53
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	90 81       	ld	r25, Z
    22b6:	88 e0       	ldi	r24, 0x08	; 8
    22b8:	89 27       	eor	r24, r25
    22ba:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    22bc:	a5 e3       	ldi	r26, 0x35	; 53
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e5 e3       	ldi	r30, 0x35	; 53
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	90 81       	ld	r25, Z
    22c6:	80 e1       	ldi	r24, 0x10	; 16
    22c8:	89 27       	eor	r24, r25
    22ca:	8c 93       	st	X, r24
					GLCD_Command((Page+Page_inc));
    22cc:	8f 81       	ldd	r24, Y+7	; 0x07
    22ce:	98 85       	ldd	r25, Y+8	; 0x08
    22d0:	cc 01       	movw	r24, r24
    22d2:	a0 e0       	ldi	r26, 0x00	; 0
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	bc 01       	movw	r22, r24
    22d8:	cd 01       	movw	r24, r26
    22da:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	29 81       	ldd	r18, Y+1	; 0x01
    22e8:	3a 81       	ldd	r19, Y+2	; 0x02
    22ea:	4b 81       	ldd	r20, Y+3	; 0x03
    22ec:	5c 81       	ldd	r21, Y+4	; 0x04
    22ee:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    2306:	69 81       	ldd	r22, Y+1	; 0x01
    2308:	7a 81       	ldd	r23, Y+2	; 0x02
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	9c 81       	ldd	r25, Y+4	; 0x04
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e0       	ldi	r20, 0x00	; 0
    2314:	5f e3       	ldi	r21, 0x3F	; 63
    2316:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	89 83       	std	Y+1, r24	; 0x01
    2320:	9a 83       	std	Y+2, r25	; 0x02
    2322:	ab 83       	std	Y+3, r26	; 0x03
    2324:	bc 83       	std	Y+4, r27	; 0x04
				}
				Y_address++;
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	01 96       	adiw	r24, 0x01	; 1
    232c:	9e 83       	std	Y+6, r25	; 0x06
    232e:	8d 83       	std	Y+5, r24	; 0x05
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
		{
			for(column=0; column<FontWidth; column++)
    2330:	89 85       	ldd	r24, Y+9	; 0x09
    2332:	9a 85       	ldd	r25, Y+10	; 0x0a
    2334:	01 96       	adiw	r24, 0x01	; 1
    2336:	9a 87       	std	Y+10, r25	; 0x0a
    2338:	89 87       	std	Y+9, r24	; 0x09
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	85 30       	cpi	r24, 0x05	; 5
    2340:	91 05       	cpc	r25, r1
    2342:	08 f4       	brcc	.+2      	; 0x2346 <GLCD_String+0x308>
    2344:	8e cf       	rjmp	.-228    	; 0x2262 <GLCD_String+0x224>
    2346:	c0 c0       	rjmp	.+384    	; 0x24c8 <GLCD_String+0x48a>
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
    2348:	1a 86       	std	Y+10, r1	; 0x0a
    234a:	19 86       	std	Y+9, r1	; 0x09
    234c:	6c c0       	rjmp	.+216    	; 0x2426 <GLCD_String+0x3e8>
			{
				GLCD_Data(font[str[i]-32][column]);
    234e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2350:	3f 85       	ldd	r19, Y+15	; 0x0f
    2352:	8b 85       	ldd	r24, Y+11	; 0x0b
    2354:	9c 85       	ldd	r25, Y+12	; 0x0c
    2356:	f9 01       	movw	r30, r18
    2358:	e8 0f       	add	r30, r24
    235a:	f9 1f       	adc	r31, r25
    235c:	80 81       	ld	r24, Z
    235e:	88 2f       	mov	r24, r24
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9c 01       	movw	r18, r24
    2364:	20 52       	subi	r18, 0x20	; 32
    2366:	30 40       	sbci	r19, 0x00	; 0
    2368:	49 85       	ldd	r20, Y+9	; 0x09
    236a:	5a 85       	ldd	r21, Y+10	; 0x0a
    236c:	c9 01       	movw	r24, r18
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	82 0f       	add	r24, r18
    2378:	93 1f       	adc	r25, r19
    237a:	84 0f       	add	r24, r20
    237c:	95 1f       	adc	r25, r21
    237e:	fc 01       	movw	r30, r24
    2380:	ee 58       	subi	r30, 0x8E	; 142
    2382:	fe 4f       	sbci	r31, 0xFE	; 254
    2384:	80 81       	ld	r24, Z
    2386:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GLCD_Data>
				if((Y_address+1)%64==0)
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	01 96       	adiw	r24, 0x01	; 1
    2390:	8f 73       	andi	r24, 0x3F	; 63
    2392:	90 70       	andi	r25, 0x00	; 0
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	e9 f5       	brne	.+122    	; 0x2412 <GLCD_String+0x3d4>
				{
					Command_Port ^= (1 << CS1);
    2398:	a5 e3       	ldi	r26, 0x35	; 53
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e5 e3       	ldi	r30, 0x35	; 53
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	90 81       	ld	r25, Z
    23a2:	88 e0       	ldi	r24, 0x08	; 8
    23a4:	89 27       	eor	r24, r25
    23a6:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    23a8:	a5 e3       	ldi	r26, 0x35	; 53
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e5 e3       	ldi	r30, 0x35	; 53
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	90 81       	ld	r25, Z
    23b2:	80 e1       	ldi	r24, 0x10	; 16
    23b4:	89 27       	eor	r24, r25
    23b6:	8c 93       	st	X, r24
					GLCD_Command((Page+Page_inc));
    23b8:	8f 81       	ldd	r24, Y+7	; 0x07
    23ba:	98 85       	ldd	r25, Y+8	; 0x08
    23bc:	cc 01       	movw	r24, r24
    23be:	a0 e0       	ldi	r26, 0x00	; 0
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	29 81       	ldd	r18, Y+1	; 0x01
    23d4:	3a 81       	ldd	r19, Y+2	; 0x02
    23d6:	4b 81       	ldd	r20, Y+3	; 0x03
    23d8:	5c 81       	ldd	r21, Y+4	; 0x04
    23da:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    23f2:	69 81       	ldd	r22, Y+1	; 0x01
    23f4:	7a 81       	ldd	r23, Y+2	; 0x02
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	9c 81       	ldd	r25, Y+4	; 0x04
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	ab 83       	std	Y+3, r26	; 0x03
    2410:	bc 83       	std	Y+4, r27	; 0x04
				}
				Y_address++;
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	9e 81       	ldd	r25, Y+6	; 0x06
    2416:	01 96       	adiw	r24, 0x01	; 1
    2418:	9e 83       	std	Y+6, r25	; 0x06
    241a:	8d 83       	std	Y+5, r24	; 0x05
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
    241c:	89 85       	ldd	r24, Y+9	; 0x09
    241e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2420:	01 96       	adiw	r24, 0x01	; 1
    2422:	9a 87       	std	Y+10, r25	; 0x0a
    2424:	89 87       	std	Y+9, r24	; 0x09
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	85 30       	cpi	r24, 0x05	; 5
    242c:	91 05       	cpc	r25, r1
    242e:	08 f4       	brcc	.+2      	; 0x2432 <GLCD_String+0x3f4>
    2430:	8e cf       	rjmp	.-228    	; 0x234e <GLCD_String+0x310>
					GLCD_Command((Page+Page_inc));
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
			GLCD_Data(0);
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GLCD_Data>
			Y_address++;
    2438:	8d 81       	ldd	r24, Y+5	; 0x05
    243a:	9e 81       	ldd	r25, Y+6	; 0x06
    243c:	01 96       	adiw	r24, 0x01	; 1
    243e:	9e 83       	std	Y+6, r25	; 0x06
    2440:	8d 83       	std	Y+5, r24	; 0x05
			if((Y_address)%64 == 0)
    2442:	8d 81       	ldd	r24, Y+5	; 0x05
    2444:	9e 81       	ldd	r25, Y+6	; 0x06
    2446:	8f 73       	andi	r24, 0x3F	; 63
    2448:	90 70       	andi	r25, 0x00	; 0
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	e9 f5       	brne	.+122    	; 0x24c8 <GLCD_String+0x48a>
			{
				Command_Port ^= (1 << CS1);
    244e:	a5 e3       	ldi	r26, 0x35	; 53
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e5 e3       	ldi	r30, 0x35	; 53
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	90 81       	ld	r25, Z
    2458:	88 e0       	ldi	r24, 0x08	; 8
    245a:	89 27       	eor	r24, r25
    245c:	8c 93       	st	X, r24
				Command_Port ^= (1 << CS2);
    245e:	a5 e3       	ldi	r26, 0x35	; 53
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e5 e3       	ldi	r30, 0x35	; 53
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	90 81       	ld	r25, Z
    2468:	80 e1       	ldi	r24, 0x10	; 16
    246a:	89 27       	eor	r24, r25
    246c:	8c 93       	st	X, r24
				GLCD_Command((Page+Page_inc));
    246e:	8f 81       	ldd	r24, Y+7	; 0x07
    2470:	98 85       	ldd	r25, Y+8	; 0x08
    2472:	cc 01       	movw	r24, r24
    2474:	a0 e0       	ldi	r26, 0x00	; 0
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	bc 01       	movw	r22, r24
    247a:	cd 01       	movw	r24, r26
    247c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	bc 01       	movw	r22, r24
    2486:	cd 01       	movw	r24, r26
    2488:	29 81       	ldd	r18, Y+1	; 0x01
    248a:	3a 81       	ldd	r19, Y+2	; 0x02
    248c:	4b 81       	ldd	r20, Y+3	; 0x03
    248e:	5c 81       	ldd	r21, Y+4	; 0x04
    2490:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
				Page_inc = Page_inc + 0.5;
    24a8:	69 81       	ldd	r22, Y+1	; 0x01
    24aa:	7a 81       	ldd	r23, Y+2	; 0x02
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	ab 83       	std	Y+3, r26	; 0x03
    24c6:	bc 83       	std	Y+4, r27	; 0x04

	Command_Port |= (1 << CS1);	/* Select Left half of display */
	Command_Port &= ~(1 << CS2);

	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
    24c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    24ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    24cc:	01 96       	adiw	r24, 0x01	; 1
    24ce:	9c 87       	std	Y+12, r25	; 0x0c
    24d0:	8b 87       	std	Y+11, r24	; 0x0b
    24d2:	2e 85       	ldd	r18, Y+14	; 0x0e
    24d4:	3f 85       	ldd	r19, Y+15	; 0x0f
    24d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    24d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    24da:	f9 01       	movw	r30, r18
    24dc:	e8 0f       	add	r30, r24
    24de:	f9 1f       	adc	r31, r25
    24e0:	80 81       	ld	r24, Z
    24e2:	88 23       	and	r24, r24
    24e4:	09 f0       	breq	.+2      	; 0x24e8 <GLCD_String+0x4aa>
    24e6:	df cd       	rjmp	.-1090   	; 0x20a6 <GLCD_String+0x68>
				GLCD_Command((Page+Page_inc));
				Page_inc = Page_inc + 0.5;
			}
		}
	}
	GLCD_Command(0x40);	/* Set Y address (column=0) */
    24e8:	80 e4       	ldi	r24, 0x40	; 64
    24ea:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GLCD_Command>
}
    24ee:	2f 96       	adiw	r28, 0x0f	; 15
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	1f 91       	pop	r17
    2500:	0f 91       	pop	r16
    2502:	08 95       	ret

00002504 <intToAscii>:


// Function to convert an integer to a string
void intToAscii(int num, char* buffer, int bufferSize) {
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	00 d0       	rcall	.+0      	; 0x250a <intToAscii+0x6>
    250a:	00 d0       	rcall	.+0      	; 0x250c <intToAscii+0x8>
    250c:	00 d0       	rcall	.+0      	; 0x250e <intToAscii+0xa>
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	9a 83       	std	Y+2, r25	; 0x02
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	7c 83       	std	Y+4, r23	; 0x04
    2518:	6b 83       	std	Y+3, r22	; 0x03
    251a:	5e 83       	std	Y+6, r21	; 0x06
    251c:	4d 83       	std	Y+5, r20	; 0x05
   // snprintf(buffer, bufferSize, "%d", num);
}
    251e:	26 96       	adiw	r28, 0x06	; 6
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <GLCD_DisplayVariable>:

// Function to display an integer variable on GLCD
void GLCD_DisplayVariable(int page_no, int variable) {
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	2e 97       	sbiw	r28, 0x0e	; 14
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
    2544:	9c 87       	std	Y+12, r25	; 0x0c
    2546:	8b 87       	std	Y+11, r24	; 0x0b
    2548:	7e 87       	std	Y+14, r23	; 0x0e
    254a:	6d 87       	std	Y+13, r22	; 0x0d
    char buffer[10];  // Adjust the buffer size based on the maximum expected digits in your variable
    intToAscii(variable, buffer, sizeof(buffer));
    254c:	8d 85       	ldd	r24, Y+13	; 0x0d
    254e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2550:	9e 01       	movw	r18, r28
    2552:	2f 5f       	subi	r18, 0xFF	; 255
    2554:	3f 4f       	sbci	r19, 0xFF	; 255
    2556:	b9 01       	movw	r22, r18
    2558:	4a e0       	ldi	r20, 0x0A	; 10
    255a:	50 e0       	ldi	r21, 0x00	; 0
    255c:	0e 94 82 12 	call	0x2504	; 0x2504 <intToAscii>
    GLCD_String(page_no,          buffer);
    2560:	8b 85       	ldd	r24, Y+11	; 0x0b
    2562:	9e 01       	movw	r18, r28
    2564:	2f 5f       	subi	r18, 0xFF	; 255
    2566:	3f 4f       	sbci	r19, 0xFF	; 255
    2568:	b9 01       	movw	r22, r18
    256a:	0e 94 1f 10 	call	0x203e	; 0x203e <GLCD_String>
}
    256e:	2e 96       	adiw	r28, 0x0e	; 14
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <main>:
 u32 Counts=0;
 u8 Preload=0 ;
 u32 N_ISR=0;
 u32 N_OVF = 0 ;
int main()
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	00 d0       	rcall	.+0      	; 0x2586 <main+0x6>
    2586:	00 d0       	rcall	.+0      	; 0x2588 <main+0x8>
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDirection(2,7,1);
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	67 e0       	ldi	r22, 0x07	; 7
    2590:	41 e0       	ldi	r20, 0x01	; 1
    2592:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_enuSetPinDirection>
	
	
	//DIO_enuSetPinValue(2,7,1);
	
    TCCR0 = 0b00001101;
    2596:	e3 e5       	ldi	r30, 0x53	; 83
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	8d e0       	ldi	r24, 0x0D	; 13
    259c:	80 83       	st	Z, r24
	//TCCR0&=~(1<<3);
	//brescal 1024
	//TCCR0 |=(1<<0);
	//TCCR0 |=(1<<2);
	//Enable interrupt
	 TIMSK |=(1<<1);
    259e:	a9 e5       	ldi	r26, 0x59	; 89
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e9 e5       	ldi	r30, 0x59	; 89
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	82 60       	ori	r24, 0x02	; 2
    25aa:	8c 93       	st	X, r24
     GIE_vidEnable();
    25ac:	0e 94 2f 07 	call	0xe5e	; 0xe5e <GIE_vidEnable>

	u32 Time = 500; //1 sec
    25b0:	84 ef       	ldi	r24, 0xF4	; 244
    25b2:	91 e0       	ldi	r25, 0x01	; 1
    25b4:	a0 e0       	ldi	r26, 0x00	; 0
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	ab 83       	std	Y+3, r26	; 0x03
    25be:	bc 83       	std	Y+4, r27	; 0x04
	Counts = ((Time/1000)*16000000ul)/ (1024); //20000000
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
    25c4:	ab 81       	ldd	r26, Y+3	; 0x03
    25c6:	bc 81       	ldd	r27, Y+4	; 0x04
    25c8:	28 ee       	ldi	r18, 0xE8	; 232
    25ca:	33 e0       	ldi	r19, 0x03	; 3
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	bc 01       	movw	r22, r24
    25d2:	cd 01       	movw	r24, r26
    25d4:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__udivmodsi4>
    25d8:	da 01       	movw	r26, r20
    25da:	c9 01       	movw	r24, r18
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	34 e2       	ldi	r19, 0x24	; 36
    25e0:	44 ef       	ldi	r20, 0xF4	; 244
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	bc 01       	movw	r22, r24
    25e6:	cd 01       	movw	r24, r26
    25e8:	0e 94 bd 13 	call	0x277a	; 0x277a <__mulsi3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	07 2e       	mov	r0, r23
    25f2:	7a e0       	ldi	r23, 0x0A	; 10
    25f4:	b6 95       	lsr	r27
    25f6:	a7 95       	ror	r26
    25f8:	97 95       	ror	r25
    25fa:	87 95       	ror	r24
    25fc:	7a 95       	dec	r23
    25fe:	d1 f7       	brne	.-12     	; 0x25f4 <main+0x74>
    2600:	70 2d       	mov	r23, r0
    2602:	80 93 58 03 	sts	0x0358, r24
    2606:	90 93 59 03 	sts	0x0359, r25
    260a:	a0 93 5a 03 	sts	0x035A, r26
    260e:	b0 93 5b 03 	sts	0x035B, r27
	//Preload = 256UL - (Counts % 256);
	//TCNT0 = Preload ;
	N_OVF = (Counts + 255)/256;
    2612:	80 91 58 03 	lds	r24, 0x0358
    2616:	90 91 59 03 	lds	r25, 0x0359
    261a:	a0 91 5a 03 	lds	r26, 0x035A
    261e:	b0 91 5b 03 	lds	r27, 0x035B
    2622:	81 50       	subi	r24, 0x01	; 1
    2624:	9f 4f       	sbci	r25, 0xFF	; 255
    2626:	af 4f       	sbci	r26, 0xFF	; 255
    2628:	bf 4f       	sbci	r27, 0xFF	; 255
    262a:	89 2f       	mov	r24, r25
    262c:	9a 2f       	mov	r25, r26
    262e:	ab 2f       	mov	r26, r27
    2630:	bb 27       	eor	r27, r27
    2632:	80 93 61 03 	sts	0x0361, r24
    2636:	90 93 62 03 	sts	0x0362, r25
    263a:	a0 93 63 03 	sts	0x0363, r26
    263e:	b0 93 64 03 	sts	0x0364, r27
	N_ISR = N_OVF;
    2642:	80 91 61 03 	lds	r24, 0x0361
    2646:	90 91 62 03 	lds	r25, 0x0362
    264a:	a0 91 63 03 	lds	r26, 0x0363
    264e:	b0 91 64 03 	lds	r27, 0x0364
    2652:	80 93 5d 03 	sts	0x035D, r24
    2656:	90 93 5e 03 	sts	0x035E, r25
    265a:	a0 93 5f 03 	sts	0x035F, r26
    265e:	b0 93 60 03 	sts	0x0360, r27
	OCR0 = 156;
    2662:	ec e5       	ldi	r30, 0x5C	; 92
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	8c e9       	ldi	r24, 0x9C	; 156
    2668:	80 83       	st	Z, r24
    266a:	ff cf       	rjmp	.-2      	; 0x266a <main+0xea>

0000266c <__vector_10>:
	while(1);

}
void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    266c:	1f 92       	push	r1
    266e:	0f 92       	push	r0
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	0f 92       	push	r0
    2674:	11 24       	eor	r1, r1
    2676:	2f 93       	push	r18
    2678:	3f 93       	push	r19
    267a:	4f 93       	push	r20
    267c:	5f 93       	push	r21
    267e:	6f 93       	push	r22
    2680:	7f 93       	push	r23
    2682:	8f 93       	push	r24
    2684:	9f 93       	push	r25
    2686:	af 93       	push	r26
    2688:	bf 93       	push	r27
    268a:	ef 93       	push	r30
    268c:	ff 93       	push	r31
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
	
		DIO_enuTogglePinValue(2,7);
    2696:	82 e0       	ldi	r24, 0x02	; 2
    2698:	67 e0       	ldi	r22, 0x07	; 7
    269a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_enuTogglePinValue>

}
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	ff 91       	pop	r31
    26a4:	ef 91       	pop	r30
    26a6:	bf 91       	pop	r27
    26a8:	af 91       	pop	r26
    26aa:	9f 91       	pop	r25
    26ac:	8f 91       	pop	r24
    26ae:	7f 91       	pop	r23
    26b0:	6f 91       	pop	r22
    26b2:	5f 91       	pop	r21
    26b4:	4f 91       	pop	r20
    26b6:	3f 91       	pop	r19
    26b8:	2f 91       	pop	r18
    26ba:	0f 90       	pop	r0
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	0f 90       	pop	r0
    26c0:	1f 90       	pop	r1
    26c2:	18 95       	reti

000026c4 <__vector_11>:


void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    26c4:	1f 92       	push	r1
    26c6:	0f 92       	push	r0
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	0f 92       	push	r0
    26cc:	11 24       	eor	r1, r1
    26ce:	2f 93       	push	r18
    26d0:	3f 93       	push	r19
    26d2:	4f 93       	push	r20
    26d4:	5f 93       	push	r21
    26d6:	6f 93       	push	r22
    26d8:	7f 93       	push	r23
    26da:	8f 93       	push	r24
    26dc:	9f 93       	push	r25
    26de:	af 93       	push	r26
    26e0:	bf 93       	push	r27
    26e2:	ef 93       	push	r30
    26e4:	ff 93       	push	r31
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
	N_ISR = N_ISR-1;
    26ee:	80 91 5d 03 	lds	r24, 0x035D
    26f2:	90 91 5e 03 	lds	r25, 0x035E
    26f6:	a0 91 5f 03 	lds	r26, 0x035F
    26fa:	b0 91 60 03 	lds	r27, 0x0360
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	a1 09       	sbc	r26, r1
    2702:	b1 09       	sbc	r27, r1
    2704:	80 93 5d 03 	sts	0x035D, r24
    2708:	90 93 5e 03 	sts	0x035E, r25
    270c:	a0 93 5f 03 	sts	0x035F, r26
    2710:	b0 93 60 03 	sts	0x0360, r27
	if(!N_ISR )
    2714:	80 91 5d 03 	lds	r24, 0x035D
    2718:	90 91 5e 03 	lds	r25, 0x035E
    271c:	a0 91 5f 03 	lds	r26, 0x035F
    2720:	b0 91 60 03 	lds	r27, 0x0360
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	a1 05       	cpc	r26, r1
    2728:	b1 05       	cpc	r27, r1
    272a:	a1 f4       	brne	.+40     	; 0x2754 <__vector_11+0x90>
	{
		//TCNT0 = Preload;
		DIO_enuTogglePinValue(2,7);
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	67 e0       	ldi	r22, 0x07	; 7
    2730:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_enuTogglePinValue>
		//DIO_enuSetPinValue(2,7,1);
		N_ISR = N_OVF ;
    2734:	80 91 61 03 	lds	r24, 0x0361
    2738:	90 91 62 03 	lds	r25, 0x0362
    273c:	a0 91 63 03 	lds	r26, 0x0363
    2740:	b0 91 64 03 	lds	r27, 0x0364
    2744:	80 93 5d 03 	sts	0x035D, r24
    2748:	90 93 5e 03 	sts	0x035E, r25
    274c:	a0 93 5f 03 	sts	0x035F, r26
    2750:	b0 93 60 03 	sts	0x0360, r27
	}
}
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	ff 91       	pop	r31
    275a:	ef 91       	pop	r30
    275c:	bf 91       	pop	r27
    275e:	af 91       	pop	r26
    2760:	9f 91       	pop	r25
    2762:	8f 91       	pop	r24
    2764:	7f 91       	pop	r23
    2766:	6f 91       	pop	r22
    2768:	5f 91       	pop	r21
    276a:	4f 91       	pop	r20
    276c:	3f 91       	pop	r19
    276e:	2f 91       	pop	r18
    2770:	0f 90       	pop	r0
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	0f 90       	pop	r0
    2776:	1f 90       	pop	r1
    2778:	18 95       	reti

0000277a <__mulsi3>:
    277a:	62 9f       	mul	r22, r18
    277c:	d0 01       	movw	r26, r0
    277e:	73 9f       	mul	r23, r19
    2780:	f0 01       	movw	r30, r0
    2782:	82 9f       	mul	r24, r18
    2784:	e0 0d       	add	r30, r0
    2786:	f1 1d       	adc	r31, r1
    2788:	64 9f       	mul	r22, r20
    278a:	e0 0d       	add	r30, r0
    278c:	f1 1d       	adc	r31, r1
    278e:	92 9f       	mul	r25, r18
    2790:	f0 0d       	add	r31, r0
    2792:	83 9f       	mul	r24, r19
    2794:	f0 0d       	add	r31, r0
    2796:	74 9f       	mul	r23, r20
    2798:	f0 0d       	add	r31, r0
    279a:	65 9f       	mul	r22, r21
    279c:	f0 0d       	add	r31, r0
    279e:	99 27       	eor	r25, r25
    27a0:	72 9f       	mul	r23, r18
    27a2:	b0 0d       	add	r27, r0
    27a4:	e1 1d       	adc	r30, r1
    27a6:	f9 1f       	adc	r31, r25
    27a8:	63 9f       	mul	r22, r19
    27aa:	b0 0d       	add	r27, r0
    27ac:	e1 1d       	adc	r30, r1
    27ae:	f9 1f       	adc	r31, r25
    27b0:	bd 01       	movw	r22, r26
    27b2:	cf 01       	movw	r24, r30
    27b4:	11 24       	eor	r1, r1
    27b6:	08 95       	ret

000027b8 <__udivmodsi4>:
    27b8:	a1 e2       	ldi	r26, 0x21	; 33
    27ba:	1a 2e       	mov	r1, r26
    27bc:	aa 1b       	sub	r26, r26
    27be:	bb 1b       	sub	r27, r27
    27c0:	fd 01       	movw	r30, r26
    27c2:	0d c0       	rjmp	.+26     	; 0x27de <__udivmodsi4_ep>

000027c4 <__udivmodsi4_loop>:
    27c4:	aa 1f       	adc	r26, r26
    27c6:	bb 1f       	adc	r27, r27
    27c8:	ee 1f       	adc	r30, r30
    27ca:	ff 1f       	adc	r31, r31
    27cc:	a2 17       	cp	r26, r18
    27ce:	b3 07       	cpc	r27, r19
    27d0:	e4 07       	cpc	r30, r20
    27d2:	f5 07       	cpc	r31, r21
    27d4:	20 f0       	brcs	.+8      	; 0x27de <__udivmodsi4_ep>
    27d6:	a2 1b       	sub	r26, r18
    27d8:	b3 0b       	sbc	r27, r19
    27da:	e4 0b       	sbc	r30, r20
    27dc:	f5 0b       	sbc	r31, r21

000027de <__udivmodsi4_ep>:
    27de:	66 1f       	adc	r22, r22
    27e0:	77 1f       	adc	r23, r23
    27e2:	88 1f       	adc	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	1a 94       	dec	r1
    27e8:	69 f7       	brne	.-38     	; 0x27c4 <__udivmodsi4_loop>
    27ea:	60 95       	com	r22
    27ec:	70 95       	com	r23
    27ee:	80 95       	com	r24
    27f0:	90 95       	com	r25
    27f2:	9b 01       	movw	r18, r22
    27f4:	ac 01       	movw	r20, r24
    27f6:	bd 01       	movw	r22, r26
    27f8:	cf 01       	movw	r24, r30
    27fa:	08 95       	ret

000027fc <__prologue_saves__>:
    27fc:	2f 92       	push	r2
    27fe:	3f 92       	push	r3
    2800:	4f 92       	push	r4
    2802:	5f 92       	push	r5
    2804:	6f 92       	push	r6
    2806:	7f 92       	push	r7
    2808:	8f 92       	push	r8
    280a:	9f 92       	push	r9
    280c:	af 92       	push	r10
    280e:	bf 92       	push	r11
    2810:	cf 92       	push	r12
    2812:	df 92       	push	r13
    2814:	ef 92       	push	r14
    2816:	ff 92       	push	r15
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	ca 1b       	sub	r28, r26
    2826:	db 0b       	sbc	r29, r27
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	09 94       	ijmp

00002834 <__epilogue_restores__>:
    2834:	2a 88       	ldd	r2, Y+18	; 0x12
    2836:	39 88       	ldd	r3, Y+17	; 0x11
    2838:	48 88       	ldd	r4, Y+16	; 0x10
    283a:	5f 84       	ldd	r5, Y+15	; 0x0f
    283c:	6e 84       	ldd	r6, Y+14	; 0x0e
    283e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2840:	8c 84       	ldd	r8, Y+12	; 0x0c
    2842:	9b 84       	ldd	r9, Y+11	; 0x0b
    2844:	aa 84       	ldd	r10, Y+10	; 0x0a
    2846:	b9 84       	ldd	r11, Y+9	; 0x09
    2848:	c8 84       	ldd	r12, Y+8	; 0x08
    284a:	df 80       	ldd	r13, Y+7	; 0x07
    284c:	ee 80       	ldd	r14, Y+6	; 0x06
    284e:	fd 80       	ldd	r15, Y+5	; 0x05
    2850:	0c 81       	ldd	r16, Y+4	; 0x04
    2852:	1b 81       	ldd	r17, Y+3	; 0x03
    2854:	aa 81       	ldd	r26, Y+2	; 0x02
    2856:	b9 81       	ldd	r27, Y+1	; 0x01
    2858:	ce 0f       	add	r28, r30
    285a:	d1 1d       	adc	r29, r1
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	ed 01       	movw	r28, r26
    2868:	08 95       	ret

0000286a <_exit>:
    286a:	f8 94       	cli

0000286c <__stop_program>:
    286c:	ff cf       	rjmp	.-2      	; 0x286c <__stop_program>
